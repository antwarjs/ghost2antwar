{"meta":{"exported_on":1425038957056,"version":"000"},"data":{"posts":[{"id":0,"title":"Linkdump 24 - Business, Personal Development, Computer Graphics...","slug":"linkdump_24_business_personal_development_computer_graphics","markdown":"Long time no link dump. This is going to be the first one of the year given . Enjoy? \n\n## Business\n\n* [Why the Hand Sanitizer Mindset Is Bad for Your Life and Your Business](http://chuckblakeman.com/2015/2/texts/why-the-hand-sanitizer-mindset-is-bad-for-your-life-and-your-business)\n* [Why You Should Never Use the Term &#x201C;Human Resources&#x201D; Again](http://chuckblakeman.com/2015/2/texts/why-you-should-never-use-the-term-human-resources-again)\n* [This Woman Just Explained Economics In A Nutshell. And It&apos;s So True It Hurts.](http://www.tickld.com/x/economicsexplained)\n* [From Open (Unlimited) to Minimum Vacation Policy](http://www.paperplanes.de/2014/12/10/from-open-to-minimum-vacation-policy.html)\n* [2015 Will See The Rise Of Human Science And Technology Convergence](http://blogs.forrester.com/david_johnson/14-11-05-2015_will_see_the_rise_of_human_science_and_technology_convergence)\n* [Silicon Valley job title generator](http://siliconvalleyjobtitlegenerator.tumblr.com/)\n* [Seagull manager](https://en.wikipedia.org/wiki/Seagull_manager)\n* [Grow Someone Past You](http://www.becomingminimalist.com/grow-someone/) \n\n## Personal Development\n\n* [Improve your eyesight](http://www.eorama.com/en/3_point_exercise.html)\n* [Why do we give lectures? Why does anyone attend them?](http://educationoutrage.blogspot.ca/2015/01/why-do-we-give-lectures-why-does-anyone.html)\n* [Men Take More &apos;Idiotic Risks,&apos; Study Finds](http://www.livescience.com/49101-darwin-awards-are-men-idiots.html) \n\n### Tech\n\n* [Top 6 Tech Skills You Need in 2015](http://www.inc.com/aaron-skonnard/the-top-6-tech-skills-you-need-in-2015.html)\n* [How to completely remove Birthdays from Google Calendar](https://medium.com/@mulligan/how-to-completely-remove-birthdays-from-google-calendar-53e3e53acaca)\n* [Switch on Dark Mode in Mac OS X Yosemite](http://www.macworld.co.uk/how-to/mac-software/turn-on-yosemites-dark-mode-on-mac-3534690/) \n\n### Lifehacks\n\n* [How to learn efficiently](http://lemire.me/blog/archives/2014/12/30/how-to-learn-efficiently/)\n* [Feeling Uncomfortable: The Way to Create Amazing Content](https://blog.bufferapp.com/uncomfortable-creativity-create-amazing-content) \n\n### Finland\n\n* [5 Bad American Habits I Kicked in Finland](http://www.theatlantic.com/international/archive/2015/02/five-bad-american-habits-i-kicked-in-finland/385140/)\n* [Finnish problems](http://finnishproblems.tumblr.com/post/92532641311)\n* [56 Reasons You Should Move To Finland Immediately](http://www.buzzfeed.com/tabathaleggett/reasons-you-should-never-leave-finland) \n\n## Computer Graphics\n\n* [Unreal Paris](http://www.benoitdereau.com/unrealparis.html)\n* [Path Tracing 3D Fractals](http://blog.hvidtfeldts.net/index.php/2015/01/path-tracing-3d-fractals/)\n* [Eigenvectors and eigenvalues explained visually](http://setosa.io/ev/eigenvectors-and-eigenvalues/)\n* [Google Earth Pro is now free](http://google-latlong.blogspot.fi/2015/01/google-earth-pro-is-now-free.html) \n\n## Software\n\n* [Linux 4.0 is coming](https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/)\n* [Canva - a Light Design App for Non-Designers](http://www.nixtu.info/2015/02/canva-light-design-app-for-non-designers.html)\n* [Node v0.12.0 (Stable)](http://blog.nodejs.org/2015/02/06/node-v0-12-0-stable/)\n* [io.js](https://iojs.org/)\n* [exemd](http://www.vittoriozaccaria.net/exemd/) \n\n### Terminal\n\n* [yaronn/blessed-contrib](https://github.com/yaronn/blessed-contrib/)\n* [jq](http://stedolan.github.io/jq/)\n* [pgcli](http://pgcli.com/) \n\n### Git\n\n* [Initial revision of &quot;git&quot;, the information manager from hell](https://github.com/git/git/commit/e83c5163316f89bfbde7d9ab23ca2e25604af290)\n* [IonicaBizau/git-stats](https://github.com/IonicaBizau/git-stats)\n* [hgarc014/git-game](https://github.com/hgarc014/git-game) \n\n## Software Development\n\n* [The Myth of the Interchangeable Programmer](http://www.datamation.com/career/article.php/3757311/The-Myth-of-the-Interchangeable-Programmer-Can146t-We-Just-Offshore-Him.htm)\n* [The Case for Slow Programming](https://ventrellathing.wordpress.com/2013/06/18/the-case-for-slow-programming/) \n\n### Stories\n\n* [Story by Author of PING for UNIX](http://www.askapache.com/hacking/ping-unix-darpa-muuss.html)\n* [A story about an angry carrot and a floating point fairy](http://blog.ruslans.com/2014/12/a-story-about-angry-carrot-and-floating.html)\n* [West Side-project story](http://www.commitstrip.com/en/2014/11/25/west-side-project-story/) \n\n### Guides\n\n* [How to Design Programs, Second Edition](http://www.ccs.neu.edu/home/matthias/HtDP2e/) \n\n### Architecture\n\n* [Fowler on Microservices](http://martinfowler.com/articles/microservices.html) \n\n### Techniques\n\n* [What is Reactive Programming?](https://medium.com/reactive-programming/what-is-reactive-programming-bc9fa7f4a7fc)\n* [What is FRP?](http://elm-lang.org/learn/What-is-FRP.elm)\n* [Project Estimation by Programmer](http://www.improgrammer.net/project-estimation-by-programmer/)\n* [Why programming manuals aren&apos;t on audiobook](https://vimeo.com/116986391)\n* [The Positive Coder Experiment](http://www.nicolasbize.com/blog/the-positive-coder-experiment/)\n* [Always Multiply Your Estimates by &#x3C0;](http://www.tuicool.com/articles/7niyym) \n\n### Databases\n\n* [Life in a post-database world: using crypto to avoid DB writes](https://neosmart.net/blog/2015/using-hmac-signatures-to-avoid-database-writes/) \n\n### Security\n\n* [Extracting the SuperFish certificate](http://blog.erratasec.com/2015/02/extracting-superfish-certificate.html#.VOZp80Khnqs) \n\n### Culture\n\n* [Shipping Culture Is Hurting Us](http://bitbashing.io/2015/02/16/shipping-culture.html)\n* [Feminist Hacker Barbie](http://lamppostsandbrommsticks.tumblr.com/post/110755844147/katzmatt-jeanox-feminist-hacker-barbie-is-a)\n* [The World&#x2019;s Email Encryption Software Relies on One Guy, Who is Going Broke](http://www.propublica.org/article/the-worlds-email-encryption-software-relies-on-one-guy-who-is-going-broke)\n* [Volap&#xFC;k: A Cautionary Tale for Any Language Community](http://tonyarcieri.com/volapuk-a-cautionary-tale-for-any-language-community)\n* [Don&#x2019;t leave developers in the dark](https://sprint.ly/blog/dark/)\n* [The Grumpy Programmer: Why is the Next Big Thing always ancient history?](http://www.thegrumpyprogrammer.com/2014/12/why-is-next-big-thing-always-ancient.html)\n* [Your developers aren&#x2019;t slow](https://sprint.ly/blog/your-developers-arent-slow/) \n\n### Testing\n\n* [Kill all mutants](http://www.royvanrijn.com/blog/2014/11/kill-all-mutants/) \n\n### Languages\n\n* [HeartForth](http://neilk.net/blog/2015/02/14/heartforth/)\n* [ArnoldC](http://lhartikk.github.io/ArnoldC/)\n* [Folders: a language with no files](http://esoteric.codes/post/109310541818/folders-a-language-with-no-files)\n* [Salama - Ruby in Ruby](https://salama.github.io/)\n* [articles/programming_language_learning_curves.md](https://github.com/Dobiasd/articles/blob/master/programming_language_learning_curves.md)\n* [Elm on the Functional Frontier](https://presentate.com/rtfeldman/talks/the-functional-frontier-elm)\n* [Java for Everything](http://www.teamten.com/lawrence/writings/java-for-everything.html)\n* [Snakefooding Python For Complexity Visualization](http://grokcode.com/864/snakefooding-python-code-for-complexity-visualization/) \n\n### Productivity\n\n* [Stop wasting time trying to get estimates right! &#x2013; and what to do instead](http://agileupgrade.com/stop-wasting-time-trying-to-get-estimates-right-and-what-to-do-instead/)\n* [You can&#x2019;t hire away your quality issues](http://www.sleepeasysoftware.com/you-cant-hire-away-your-quality-issues/)\n* [The Parable of the Two Programmers](http://www.csd.uwo.ca/~magi/personal/humour/Computer_Audience/The%20Parable%20of%20the%20Two%20Programmers.html)\n* [Beware the One-Person Team](http://www.theeffectiveengineer.com/blog/beware-the-one-person-team)\n* [The Hidden Costs That Engineers Ignore](http://www.theeffectiveengineer.com/blog/hidden-costs-that-engineers-ignore)\n* [Conceiving, Building and Launching an app in just 2 days.](https://medium.com/@Macropod/conceiving-building-and-launching-an-app-in-just-2-days-25679a9c4eb2) \n\n### Agile\n\n* [JIRA-9000 - The future of electronic work](http://allankelly.blogspot.fi/2014/12/jira9000-future-of-electronic-work.html)\n* [Phabricator](http://phabricator.org/)\n* [Beyond Projects](http://www.infoq.com/articles/kelly-beyond-projects) \n\n### Web Development\n\n* [My Thoughts on the Future of Web Development](http://www.nixtu.info/2015/01/thoughts-on-future-of-web-development.html) \n\n### Techniques\n\n* [Aerotwist - Flip Your Animations](http://aerotwist.com/blog/flip-your-animations/)\n* [Creating a workflow with WebPack](http://christianalfoni.github.io/javascript/2014/12/13/did-you-know-webpack-and-react-is-awesome.html)\n* [How to Publish and Maintain NPM Packages?](http://www.nixtu.info/2015/02/how-to-publish-and-maintain-npm-packages.html)\n* [Promise Anti-patterns](http://taoofcode.net/promise-anti-patterns/)\n* [Bacon.js blog: Structuring Real-Life Applications](http://baconjs.blogspot.fi/2014/12/structuring-real-life-applications.html) \n\n### Mobile Web\n\n* [Flipboard and the &#x201C;mobile web&#x201D; dream&#x2026;](http://christianheilmann.com/2015/02/15/flipboard-and-the-mobile-web-dream/)\n* [Remotely debugging mobile web apps](http://jsconsole.com/remote-debugging.html) \n\n### Frontend\n\n* [How to pick a frontend web framework?](http://www.fse.guru/how-to-pick-a-frontend-web-framework)\n* [Sublime Text for Front End Developers](https://css-tricks.com/sublime-text-front-end-developers/)\n* [10 HTML Entity Crimes You Really Shouldn&apos;t Commit](http://line25.com/articles/10-html-entity-crimes-you-really-shouldnt-commit)\n* [The &#x201C;Web Application&#x201D; Myth](https://medium.com/@codepo8/the-web-application-myth-69c6b1506515) \n\n### Backend\n\n* [Elegant APIs with JSON Schema](https://brandur.org/elegant-apis)\n* [We Suck at HTTP](http://gadgetopia.com/post/9236)\n* [The Worst Server Setup Mistake You Can Make](http://yellerapp.com/posts/2015-01-12-the-worst-server-setup-you-can-make.html)\n* [begriffs/postgrest](https://github.com/begriffs/postgrest)\n* [Using JSON Web Tokens as API Keys](https://auth0.com/blog/2014/12/02/using-json-web-tokens-as-api-keys/) \n\n### Security\n\n* [PHP Install Statistics](http://blog.ircmaxell.com/2014/12/php-install-statistics.html)\n* [Secure Secure Shell](https://stribika.github.io/2015/01/04/secure-secure-shell.html)\n* [Bcrypt. It&#x2019;s The Bare Minimum.](http://techblog.bozho.net/bcrypt-salt-its-the-bare-minimum/)\n* [observing/tolkien](https://github.com/observing/tolkien) \n\n### Performance\n\n* [Stack Exchange Performance](https://stackexchange.com/performance)\n* [Handling five billion sessions a day &#x2013; in real time](https://blog.twitter.com/2015/handling-five-billion-sessions-a-day-in-real-time) \n\n### JavaScript\n\n* [SideComments.js](http://aroc.github.io/side-comments-demo/)\n* [swagger2client](https://www.npmjs.com/package/swagger2client)\n* [schema2object](https://www.npmjs.com/package/schema2object)\n* [swagger-todo](https://github.com/bebraw/swagger-todo)\n* [tylertreat/Comcast](https://github.com/tylertreat/Comcast)\n* [BPG Image format](http://bellard.org/bpg/)\n* [ftlabs/fastclick](https://github.com/ftlabs/fastclick) \n\n### CSS\n\n* [iBooks-like Layout with Light CSS/JS](https://css-tricks.com/ibooks-like-layout-light-cssjs/)\n* [AndrewBelt/WiTeX](https://github.com/AndrewBelt/WiTeX)\n* [CSScomb: Makes your code beautiful](http://csscomb.com/)\n* [What the virtual viewport](https://gauntface.com/blog/2015/01/16/what-the-virtual-viewport)\n* [giakki/uncss](https://github.com/giakki/uncss)\n* [After Dark in CSS](http://bryanbraun.github.io/after-dark-css/)\n* [Automating CSS Regression Testing](https://css-tricks.com/automating-css-regression-testing/)\n* [Three Ways You Should Be Using HSL Color In Your Site Today](http://demosthenes.info/blog/576/Three-Ways-You-Should-Be-Using-HSL-Color-In-Your-Site-Today) \n\n### React\n\n* [Facebook just taught us all how to build websites](https://medium.com/@ericflo/facebook-just-taught-us-all-how-to-build-websites-51f1e7e996f2)\n* [How Facebook&apos;s Massive Open-Source Push Delivers Better Code And Better Engineers](http://www.fastcompany.com/3038842/how-facebooks-massive-open-source-push-delivers-better-code-and-better-engineers)\n* [React v0.13 RC](http://facebook.github.io/react/blog/2015/02/24/react-v0.13-rc1.html)\n* [Drawn ReactConf Notes](http://chantastic.io/2015-reactjs-conf/)\n* [A curriculum for learning React and Flux for total beginners](http://prestonparry.com/articles/ReactCurriculum/)\n* [jquense/react-widgets](https://github.com/jquense/react-widgets)\n* [Introducing Reactabular, react-pagify and react-ghfork](http://www.nixtu.info/2015/02/introducing-reactabular-react-pagify.html)\n* [Fluxible](http://fluxible.io/)\n* [appsforartists/ambidex](https://github.com/appsforartists/ambidex)\n* [Isomorphic Flux](https://speakerdeck.com/mridgway/isomorphic-flux)\n* [irvinebroque/isomorphic-hot-loader](https://github.com/irvinebroque/isomorphic-hot-loader)\n* [To immutable.js or not](http://qiita.com/kimagure/items/28dcbbda52ded1946489) \n\n### Angular\n\n* [Two years with Angular](http://www.fse.guru/2-years-with-angular) \n\n### Development Tools\n\n* [crapify](https://www.npmjs.com/package/crapify) \n\n## Design\n\n* [The Art of Questioning as a UX Skill](http://uxmovement.com/thinking/the-art-of-questioning-as-a-ux-skill/)\n* [Fat Footer Roundup](http://www.uxbooth.com/articles/fat-footer-roundup/)\n* [Fluid Text Inputs](http://making.fiftythree.com/fluid-text-inputs/)\n* [Why You Should Avoid Using Modal Windows on Mobile](http://uxmovement.com/mobile/why-you-should-avoid-using-modal-windows-on-mobile/)\n* [Adaptive Web Design: Crafting Rich Experiences with Progressive Enhancement](http://adaptivewebdesign.info/1st-edition/)\n* [How Button Color Contrast Guides Users to Action](http://uxmovement.com/buttons/how-button-color-contrast-guides-users-to-action/)\n* [Exposing Additional Form Fields via Checked Radio Buttons](https://css-tricks.com/exposing-form-fields-radio-button-css/)\n* [Co-Creation: Designing With the User, For the User](http://www.uxbooth.com/articles/co-creation-designing-with-the-user-for-the-user/)\n* [9 basic principles of responsive web design](http://blog.froont.com/9-basic-principles-of-responsive-web-design/)\n* [Atomic Design](http://bradfrost.com/blog/post/atomic-web-design/)\n* [Material UI](http://material-ui.com/)\n* [The Grid](https://thegrid.io/) \n\n## Games\n\n* [The Rise and Fall of the Lone Game Developer](http://www.jeffwofford.com/)\n* [Pok&#xE9;mon plays Twitch: How a robot got IRC running on an unmodified SNES](http://arstechnica.com/gaming/2015/01/pokemon-plays-twitch-how-a-robot-got-irc-running-on-an-unmodified-snes/)\n* [Rooms and Mazes: A Procedural Dungeon Generator](http://journal.stuffwithstuff.com/2014/12/21/rooms-and-mazes/)\n* [Bunnyhopping from the Programmer&apos;s Perspective](http://flafla2.github.io/2015/02/14/bunnyhop.html)\n* [&quot;Another World&quot; source code review](http://fabiensanglard.net/anotherWorld_code_review/) \n\n## Hardware\n\n* [Pebble Time](https://www.kickstarter.com/projects/597507018/pebble-time-awesome-smartwatch-no-compromises)\n* [Cellulon&#x2019;s PicoPro is an iPhone 6 Plus-sized, battery-powered HD projector](http://9to5mac.com/2015/01/30/review-cellulon-picopro-pico-projector/)\n* [Original Designs by Samsung](http://samsungdesign.tumblr.com/)\n* [Hubless Foldable Bike Prototype](https://www.youtube.com/watch?v=WIVeemZ0_e4&utm_content=buffer0204d&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer)\n* [Making logic gates out of crabs](http://hackaday.com/2012/09/28/making-logic-gates-out-of-crabs/)\n* [Lastucase](http://lastucase.com/)\n* [Device Lab Stand](http://devicelab.vanamco.com/)\n* [Apple has lost the functional high ground](http://www.marco.org/2015/01/04/apple-lost-functional-high-ground)\n* [Quake on an oscilloscope: A technical report](http://www.lofibucket.com/articles/oscilloscope_quake.html)\n* [Photograph from 1926 shows selfie stick older than meets the eye](http://www.theguardian.com/uk-news/2014/dec/23/photograph-1926-shows-selfie-stick-older-than-meets-eye)\n* [World&apos;s Simplest Electric Train](https://www.youtube.com/watch?v=J9b0J29OzAU&utm_content=buffer2a2f1&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer)\n* [Overv/vramfs](https://github.com/Overv/vramfs)\n* [Cache is the new RAM](http://blog.memsql.com/cache-is-the-new-ram/)\n* [German cloud provider will heat your house if you let them install a server](http://www.geek.com/news/german-cloud-provider-will-heat-your-house-if-you-let-them-install-a-server-1609178/) \n\n### Embedded\n\n* [Sid Lee Dashboard](http://dashboard.sidlee.com/)\n* [Intel&#xAE; Compute Stick](http://www.intel.com/content/www/us/en/compute-stick/intel-compute-stick.html)\n* [Trolling with a microcontroller](http://ultrakeet.com.au/write-ups/microcontrollers-not-allowed)\n* [Turbocharged quad-core Raspberry Pi 2 unleashed, global geekgasm likely](http://www.theregister.co.uk/2015/02/02/raspberry_pi_model_2/)\n* [Microsoft Windows on Devices &#x2013; Raspberry Pi 2](http://dev.windows.com/en-us/featured/raspberrypi2support) \n\n## Art\n\n* [CYMATICS: Science Vs. Music](https://www.youtube.com/watch?v=Q3oItpVa9fs&utm_content=bufferca733&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer)\n* [Developers at an Exhibition](http://geek-and-poke.com/geekandpoke/2014/12/22/developers)\n* [Juuso Westerlund photographs Finnish karaoke singers in his series, &#x201C;Karaoke Nation.&#x201D;](http://www.slate.com/blogs/behold/2015/02/19/juuso_westerlund_photographs_finnish_karaoke_singers_in_his_series_karaoke.html)\n* [Buffalo Bill Gates](http://buffalobillgates.tumblr.com/post/107015411396/title-by-wade-cotton-and-his-group-of-friends)\n* [Fingerpori in English! Finland&apos;s famous comic strip](http://www.expat-finland.com/living_in_finland/fingerpori.html)\n* [Grow Your Own Picture](http://chriscummins.cc/s/genetics/)\n* [Extending Van Gogh&#x2019;s Starry Night with Inpainting](http://blog.wolfram.com/2014/12/01/extending-van-goghs-starry-night-with-inpainting/)\n* [Russian Miner Spends His Breaks Taking Photos Of Foxes In The Arctic Circle](http://www.boredpanda.com/wild-fox-photography-ivan-kislov/)\n* [In Nuenen, designer Daan Roosegaarde created a solar-powered cycle path inspired by van Gogh&apos;s The Starry Night](http://www.slate.com/blogs/future_tense/2014/11/14/in_nuenen_designer_daan_roosegaarde_created_a_solar_powered_cycle_path_inspired.html)\n* [Algorithmic Art](https://www.tylerlhobbs.com/writings/programming-artwork)[previous one was at November](http://www.nixtu.info/2014/11/linkdump-23-business-personal.html)","html":"Long time no link dump. This is going to be the first one of the year given <a href=\"http://www.nixtu.info/2014/11/linkdump-23-business-personal.html\">previous one was at November</a>. Enjoy?<br /><br /><h2>Business</h2><ul><li><a href=\"http://chuckblakeman.com/2015/2/texts/why-the-hand-sanitizer-mindset-is-bad-for-your-life-and-your-business\">Why the Hand Sanitizer Mindset Is Bad for Your Life and Your Business</a></li><li><a href=\"http://chuckblakeman.com/2015/2/texts/why-you-should-never-use-the-term-human-resources-again\">Why You Should Never Use the Term “Human Resources” Again</a></li><li><a href=\"http://www.tickld.com/x/economicsexplained\">This Woman Just Explained Economics In A Nutshell. And It's So True It Hurts.</a></li><li><a href=\"http://www.paperplanes.de/2014/12/10/from-open-to-minimum-vacation-policy.html\">From Open (Unlimited) to Minimum Vacation Policy</a></li><li><a href=\"http://blogs.forrester.com/david_johnson/14-11-05-2015_will_see_the_rise_of_human_science_and_technology_convergence\">2015 Will See The Rise Of Human Science And Technology Convergence</a></li><li><a href=\"http://siliconvalleyjobtitlegenerator.tumblr.com/\">Silicon Valley job title generator</a></li><li><a href=\"https://en.wikipedia.org/wiki/Seagull_manager\">Seagull manager</a></li><li><a href=\"http://www.becomingminimalist.com/grow-someone/\">Grow Someone Past You</a></li></ul><div><br /></div><h2>Personal Development</h2><ul><li><a href=\"http://www.eorama.com/en/3_point_exercise.html\">Improve your eyesight</a></li><li><a href=\"http://educationoutrage.blogspot.ca/2015/01/why-do-we-give-lectures-why-does-anyone.html\">Why do we give lectures? Why does anyone attend them?</a></li><li><a href=\"http://www.livescience.com/49101-darwin-awards-are-men-idiots.html\">Men Take More 'Idiotic Risks,' Study Finds</a></li></ul><div><br /></div><h3>Tech</h3><ul><li><a href=\"http://www.inc.com/aaron-skonnard/the-top-6-tech-skills-you-need-in-2015.html\">Top 6 Tech Skills You Need in 2015</a></li><li><a href=\"https://medium.com/@mulligan/how-to-completely-remove-birthdays-from-google-calendar-53e3e53acaca\">How to completely remove Birthdays from Google Calendar</a></li><li><a href=\"http://www.macworld.co.uk/how-to/mac-software/turn-on-yosemites-dark-mode-on-mac-3534690/\">Switch on Dark Mode in Mac OS X Yosemite</a></li></ul><div><br /></div><h3>Lifehacks</h3><ul><li><a href=\"http://lemire.me/blog/archives/2014/12/30/how-to-learn-efficiently/\">How to learn efficiently</a></li><li><a href=\"https://blog.bufferapp.com/uncomfortable-creativity-create-amazing-content\">Feeling Uncomfortable: The Way to Create Amazing Content</a></li></ul><div><br /></div><h3>Finland</h3><ul><li><a href=\"http://www.theatlantic.com/international/archive/2015/02/five-bad-american-habits-i-kicked-in-finland/385140/\">5 Bad American Habits I Kicked in Finland</a></li><li><a href=\"http://finnishproblems.tumblr.com/post/92532641311\">Finnish problems</a></li><li><a href=\"http://www.buzzfeed.com/tabathaleggett/reasons-you-should-never-leave-finland\">56 Reasons You Should Move To Finland Immediately</a></li></ul><div><br /></div><h2>Computer Graphics</h2><ul><li><a href=\"http://www.benoitdereau.com/unrealparis.html\">Unreal Paris</a></li><li><a href=\"http://blog.hvidtfeldts.net/index.php/2015/01/path-tracing-3d-fractals/\">Path Tracing 3D Fractals</a></li><li><a href=\"http://setosa.io/ev/eigenvectors-and-eigenvalues/\">Eigenvectors and eigenvalues explained visually</a></li><li><a href=\"http://google-latlong.blogspot.fi/2015/01/google-earth-pro-is-now-free.html\">Google Earth Pro is now free</a></li></ul><div><br /></div><h2>Software</h2><ul><li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/\">Linux 4.0 is coming</a></li><li><a href=\"http://www.nixtu.info/2015/02/canva-light-design-app-for-non-designers.html\">Canva - a Light Design App for Non-Designers</a></li><li><a href=\"http://blog.nodejs.org/2015/02/06/node-v0-12-0-stable/\">Node v0.12.0 (Stable)</a></li><li><a href=\"https://iojs.org/\">io.js</a> - A friendly fork of Node</li><li><a href=\"http://www.vittoriozaccaria.net/exemd/\">exemd</a> - Markdown codeblocks preprocessor. Ie. render Graphviz and such as a part of your documents</li></ul><div><br /></div><h3>Terminal</h3><ul><li><a href=\"https://github.com/yaronn/blessed-contrib/\">yaronn/blessed-contrib</a> - Build terminal dashboards using ascii/ansi art and javascript</li><li><a href=\"http://stedolan.github.io/jq/\">jq</a> - Manipulate JSON over cli easily</li><li><a href=\"http://pgcli.com/\">pgcli</a> - Proper cli for Postgres</li></ul><div><br /></div><h3>Git</h3><ul><li><a href=\"https://github.com/git/git/commit/e83c5163316f89bfbde7d9ab23ca2e25604af290\">Initial revision of \"git\", the information manager from hell</a></li><li><a href=\"https://github.com/IonicaBizau/git-stats\">IonicaBizau/git-stats</a> - Like those GitHub bullet things but locally.</li><li><a href=\"https://github.com/hgarc014/git-game\">hgarc014/git-game</a></li></ul><div><br /></div><h2>Software Development</h2><ul><li><a href=\"http://www.datamation.com/career/article.php/3757311/The-Myth-of-the-Interchangeable-Programmer-Can146t-We-Just-Offshore-Him.htm\">The Myth of the Interchangeable Programmer</a></li><li><a href=\"https://ventrellathing.wordpress.com/2013/06/18/the-case-for-slow-programming/\">The Case for Slow Programming</a></li></ul><div><br /></div><h3>Stories</h3><ul><li><a href=\"http://www.askapache.com/hacking/ping-unix-darpa-muuss.html\">Story by Author of PING for UNIX</a></li><li><a href=\"http://blog.ruslans.com/2014/12/a-story-about-angry-carrot-and-floating.html\">A story about an angry carrot and a floating point fairy</a></li><li><a href=\"http://www.commitstrip.com/en/2014/11/25/west-side-project-story/\">West Side-project story</a></li></ul><div><br /></div><h3>Guides</h3><ul><li><a href=\"http://www.ccs.neu.edu/home/matthias/HtDP2e/\">How to Design Programs, Second Edition</a></li></ul><div><br /></div><h3>Architecture</h3><ul><li><a href=\"http://martinfowler.com/articles/microservices.html\">Fowler on Microservices</a></li></ul><div><br /></div><h3>Techniques</h3><ul><li><a href=\"https://medium.com/reactive-programming/what-is-reactive-programming-bc9fa7f4a7fc\">What is Reactive Programming?</a></li><li><a href=\"http://elm-lang.org/learn/What-is-FRP.elm\">What is FRP?</a></li><li><a href=\"http://www.improgrammer.net/project-estimation-by-programmer/\">Project Estimation by Programmer</a></li><li><a href=\"https://vimeo.com/116986391\">Why programming manuals aren't on audiobook</a></li><li><a href=\"http://www.nicolasbize.com/blog/the-positive-coder-experiment/\">The Positive Coder Experiment</a></li><li><a href=\"http://www.tuicool.com/articles/7niyym\">Always Multiply Your Estimates by π</a></li></ul><div><br /></div><h3>Databases</h3><ul><li><a href=\"https://neosmart.net/blog/2015/using-hmac-signatures-to-avoid-database-writes/\">Life in a post-database world: using crypto to avoid DB writes</a></li></ul><div><br /></div><h3>Security</h3><ul><li><a href=\"http://blog.erratasec.com/2015/02/extracting-superfish-certificate.html#.VOZp80Khnqs\">Extracting the SuperFish certificate</a></li></ul><div><br /></div><h3>Culture</h3><ul><li><a href=\"http://bitbashing.io/2015/02/16/shipping-culture.html\">Shipping Culture Is Hurting Us</a></li><li><a href=\"http://lamppostsandbrommsticks.tumblr.com/post/110755844147/katzmatt-jeanox-feminist-hacker-barbie-is-a\">Feminist Hacker Barbie</a></li><li><a href=\"http://www.propublica.org/article/the-worlds-email-encryption-software-relies-on-one-guy-who-is-going-broke\">The World’s Email Encryption Software Relies on One Guy, Who is Going Broke</a></li><li><a href=\"http://tonyarcieri.com/volapuk-a-cautionary-tale-for-any-language-community\">Volapük: A Cautionary Tale for Any Language Community</a></li><li><a href=\"https://sprint.ly/blog/dark/\">Don’t leave developers in the dark</a></li><li><a href=\"http://www.thegrumpyprogrammer.com/2014/12/why-is-next-big-thing-always-ancient.html\">The Grumpy Programmer: Why is the Next Big Thing always ancient history?</a></li><li><a href=\"https://sprint.ly/blog/your-developers-arent-slow/\">Your developers aren’t slow</a></li></ul><div><br /></div><h3>Testing</h3><ul><li><a href=\"http://www.royvanrijn.com/blog/2014/11/kill-all-mutants/\">Kill all mutants</a></li></ul><div><br /></div><h3>Languages</h3><ul><li><a href=\"http://neilk.net/blog/2015/02/14/heartforth/\">HeartForth</a></li><li><a href=\"http://lhartikk.github.io/ArnoldC/\">ArnoldC</a></li><li><a href=\"http://esoteric.codes/post/109310541818/folders-a-language-with-no-files\">Folders: a language with no files</a></li><li><a href=\"https://salama.github.io/\">Salama - Ruby in Ruby</a></li><li><a href=\"https://github.com/Dobiasd/articles/blob/master/programming_language_learning_curves.md\">articles/programming_language_learning_curves.md</a></li><li><a href=\"https://presentate.com/rtfeldman/talks/the-functional-frontier-elm\">Elm on the Functional Frontier</a></li><li><a href=\"http://www.teamten.com/lawrence/writings/java-for-everything.html\">Java for Everything</a></li><li><a href=\"http://grokcode.com/864/snakefooding-python-code-for-complexity-visualization/\">Snakefooding Python For Complexity Visualization</a></li></ul><div><br /></div><h3>Productivity</h3><ul><li><a href=\"http://agileupgrade.com/stop-wasting-time-trying-to-get-estimates-right-and-what-to-do-instead/\">Stop wasting time trying to get estimates right! – and what to do instead</a></li><li><a href=\"http://www.sleepeasysoftware.com/you-cant-hire-away-your-quality-issues/\">You can’t hire away your quality issues</a></li><li><a href=\"http://www.csd.uwo.ca/~magi/personal/humour/Computer_Audience/The%20Parable%20of%20the%20Two%20Programmers.html\">The Parable of the Two Programmers</a></li><li><a href=\"http://www.theeffectiveengineer.com/blog/beware-the-one-person-team\">Beware the One-Person Team</a></li><li><a href=\"http://www.theeffectiveengineer.com/blog/hidden-costs-that-engineers-ignore\">The Hidden Costs That Engineers Ignore</a></li><li><a href=\"https://medium.com/@Macropod/conceiving-building-and-launching-an-app-in-just-2-days-25679a9c4eb2\">Conceiving, Building and Launching an app in just 2 days.</a></li></ul><div><br /></div><h3>Agile</h3><ul><li><a href=\"http://allankelly.blogspot.fi/2014/12/jira9000-future-of-electronic-work.html\">JIRA-9000 - The future of electronic work</a></li><li><a href=\"http://phabricator.org/\">Phabricator</a> - Open source collaboration platform for developers</li><li><a href=\"http://www.infoq.com/articles/kelly-beyond-projects\">Beyond Projects</a></li></ul><div><br /></div><h3>Web Development</h3><ul><li><a href=\"http://www.nixtu.info/2015/01/thoughts-on-future-of-web-development.html\">My Thoughts on the Future of Web Development</a></li></ul><div><br /></div><h3>Techniques</h3><ul><li><a href=\"http://aerotwist.com/blog/flip-your-animations/\">Aerotwist - Flip Your Animations</a></li><li><a href=\"http://christianalfoni.github.io/javascript/2014/12/13/did-you-know-webpack-and-react-is-awesome.html\">Creating a workflow with WebPack</a></li><li><a href=\"http://www.nixtu.info/2015/02/how-to-publish-and-maintain-npm-packages.html\">How to Publish and Maintain NPM Packages?</a></li><li><a href=\"http://taoofcode.net/promise-anti-patterns/\">Promise Anti-patterns</a></li><li><a href=\"http://baconjs.blogspot.fi/2014/12/structuring-real-life-applications.html\">Bacon.js blog: Structuring Real-Life Applications</a></li></ul><div><br /></div><h3>Mobile Web</h3><ul><li><a href=\"http://christianheilmann.com/2015/02/15/flipboard-and-the-mobile-web-dream/\">Flipboard and the “mobile web” dream…</a></li><li><a href=\"http://jsconsole.com/remote-debugging.html\">Remotely debugging mobile web apps</a></li></ul><div><br /></div><h3>Frontend</h3><ul><li><a href=\"http://www.fse.guru/how-to-pick-a-frontend-web-framework\">How to pick a frontend web framework?</a></li><li><a href=\"https://css-tricks.com/sublime-text-front-end-developers/\">Sublime Text for Front End Developers</a></li><li><a href=\"http://line25.com/articles/10-html-entity-crimes-you-really-shouldnt-commit\">10 HTML Entity Crimes You Really Shouldn't Commit</a></li><li><a href=\"https://medium.com/@codepo8/the-web-application-myth-69c6b1506515\">The “Web Application” Myth</a></li></ul><div><br /></div><h3>Backend</h3><ul><li><a href=\"https://brandur.org/elegant-apis\">Elegant APIs with JSON Schema</a></li><li><a href=\"http://gadgetopia.com/post/9236\">We Suck at HTTP</a></li><li><a href=\"http://yellerapp.com/posts/2015-01-12-the-worst-server-setup-you-can-make.html\">The Worst Server Setup Mistake You Can Make</a></li><li><a href=\"https://github.com/begriffs/postgrest\">begriffs/postgrest</a> - REST API for any Postgres database</li><li><a href=\"https://auth0.com/blog/2014/12/02/using-json-web-tokens-as-api-keys/\">Using JSON Web Tokens as API Keys</a></li></ul><div><br /></div><h3>Security</h3><ul><li><a href=\"http://blog.ircmaxell.com/2014/12/php-install-statistics.html\">PHP Install Statistics</a></li><li><a href=\"https://stribika.github.io/2015/01/04/secure-secure-shell.html\">Secure Secure Shell</a></li><li><a href=\"http://techblog.bozho.net/bcrypt-salt-its-the-bare-minimum/\">Bcrypt. It’s The Bare Minimum.</a></li><li><a href=\"https://github.com/observing/tolkien\">observing/tolkien</a> - You shall not pass. An alternative to passwords.</li></ul><div><br /></div><h3>Performance</h3><ul><li><a href=\"https://stackexchange.com/performance\">Stack Exchange Performance</a></li><li><a href=\"https://blog.twitter.com/2015/handling-five-billion-sessions-a-day-in-real-time\">Handling five billion sessions a day – in real time</a></li></ul><div><br /></div><h3>JavaScript</h3><ul><li><a href=\"http://aroc.github.io/side-comments-demo/\">SideComments.js</a> - Medium style side comments with jQuery. Now only if someone ported this to React.</li><li><a href=\"https://www.npmjs.com/package/swagger2client\">swagger2client</a></li><li><a href=\"https://www.npmjs.com/package/schema2object\">schema2object</a></li><li><a href=\"https://github.com/bebraw/swagger-todo\">swagger-todo</a> - Swagger example</li><li><a href=\"https://github.com/tylertreat/Comcast\">tylertreat/Comcast</a></li><li><a href=\"http://bellard.org/bpg/\">BPG Image format</a></li><li><a href=\"https://github.com/ftlabs/fastclick\">ftlabs/fastclick</a></li></ul><div><br /></div><h3>CSS</h3><ul><li><a href=\"https://css-tricks.com/ibooks-like-layout-light-cssjs/\">iBooks-like Layout with Light CSS/JS</a></li><li><a href=\"https://github.com/AndrewBelt/WiTeX\">AndrewBelt/WiTeX</a> - What if Wikipedia was designed by Knuth?</li><li><a href=\"http://csscomb.com/\">CSScomb: Makes your code beautiful</a></li><li><a href=\"https://gauntface.com/blog/2015/01/16/what-the-virtual-viewport\">What the virtual viewport</a></li><li><a href=\"https://github.com/giakki/uncss\">giakki/uncss</a></li><li><a href=\"http://bryanbraun.github.io/after-dark-css/\">After Dark in CSS</a></li><li><a href=\"https://css-tricks.com/automating-css-regression-testing/\">Automating CSS Regression Testing</a></li><li><a href=\"http://demosthenes.info/blog/576/Three-Ways-You-Should-Be-Using-HSL-Color-In-Your-Site-Today\">Three Ways You Should Be Using HSL Color In Your Site Today</a></li></ul><div><br /></div><h3>React</h3><ul><li><a href=\"https://medium.com/@ericflo/facebook-just-taught-us-all-how-to-build-websites-51f1e7e996f2\">Facebook just taught us all how to build websites</a></li><li><a href=\"http://www.fastcompany.com/3038842/how-facebooks-massive-open-source-push-delivers-better-code-and-better-engineers\">How Facebook's Massive Open-Source Push Delivers Better Code And Better Engineers</a></li><li><a href=\"http://facebook.github.io/react/blog/2015/02/24/react-v0.13-rc1.html\">React v0.13 RC</a></li><li><a href=\"http://chantastic.io/2015-reactjs-conf/\">Drawn ReactConf Notes</a></li><li><a href=\"http://prestonparry.com/articles/ReactCurriculum/\">A curriculum for learning React and Flux for total beginners</a></li><li><a href=\"https://github.com/jquense/react-widgets\">jquense/react-widgets</a> - A nice collection of widgets for React.</li><li><a href=\"http://www.nixtu.info/2015/02/introducing-reactabular-react-pagify.html\">Introducing Reactabular, react-pagify and react-ghfork</a></li><li><a href=\"http://fluxible.io/\">Fluxible</a> - Yahoo's Flux implementation</li><li><a href=\"https://github.com/appsforartists/ambidex\">appsforartists/ambidex</a> - Isomorphic starting point</li><li><a href=\"https://speakerdeck.com/mridgway/isomorphic-flux\">Isomorphic Flux</a></li><li><a href=\"https://github.com/irvinebroque/isomorphic-hot-loader\">irvinebroque/isomorphic-hot-loader</a></li><li><a href=\"http://qiita.com/kimagure/items/28dcbbda52ded1946489\">To immutable.js or not</a></li></ul><div><br /></div><h3>Angular</h3><ul><li><a href=\"http://www.fse.guru/2-years-with-angular\">Two years with Angular</a></li></ul><div><br /></div><h3>Development Tools</h3><ul><li><a href=\"https://www.npmjs.com/package/crapify\">crapify</a> - Simulate slow, spotty HTTP connections</li></ul><div><br /></div><h2>Design</h2><ul><li><a href=\"http://uxmovement.com/thinking/the-art-of-questioning-as-a-ux-skill/\">The Art of Questioning as a UX Skill</a></li><li><a href=\"http://www.uxbooth.com/articles/fat-footer-roundup/\">Fat Footer Roundup</a></li><li><a href=\"http://making.fiftythree.com/fluid-text-inputs/\">Fluid Text Inputs</a></li><li><a href=\"http://uxmovement.com/mobile/why-you-should-avoid-using-modal-windows-on-mobile/\">Why You Should Avoid Using Modal Windows on Mobile</a></li><li><a href=\"http://adaptivewebdesign.info/1st-edition/\">Adaptive Web Design: Crafting Rich Experiences with Progressive Enhancement</a></li><li><a href=\"http://uxmovement.com/buttons/how-button-color-contrast-guides-users-to-action/\">How Button Color Contrast Guides Users to Action</a></li><li><a href=\"https://css-tricks.com/exposing-form-fields-radio-button-css/\">Exposing Additional Form Fields via Checked Radio Buttons</a></li><li><a href=\"http://www.uxbooth.com/articles/co-creation-designing-with-the-user-for-the-user/\">Co-Creation: Designing With the User, For the User</a></li><li><a href=\"http://blog.froont.com/9-basic-principles-of-responsive-web-design/\">9 basic principles of responsive web design</a></li><li><a href=\"http://bradfrost.com/blog/post/atomic-web-design/\">Atomic Design</a></li><li><a href=\"http://material-ui.com/\">Material UI</a></li><li><a href=\"https://thegrid.io/\">The Grid</a> - Let AI design for you</li></ul><div><br /></div><h2>Games</h2><ul><li><a href=\"http://www.jeffwofford.com/\">The Rise and Fall of the Lone Game Developer</a></li><li><a href=\"http://arstechnica.com/gaming/2015/01/pokemon-plays-twitch-how-a-robot-got-irc-running-on-an-unmodified-snes/\">Pokémon plays Twitch: How a robot got IRC running on an unmodified SNES</a></li><li><a href=\"http://journal.stuffwithstuff.com/2014/12/21/rooms-and-mazes/\">Rooms and Mazes: A Procedural Dungeon Generator</a></li><li><a href=\"http://flafla2.github.io/2015/02/14/bunnyhop.html\">Bunnyhopping from the Programmer's Perspective</a></li><li><a href=\"http://fabiensanglard.net/anotherWorld_code_review/\">\"Another World\" source code review</a></li></ul><div><br /></div><h2>Hardware</h2><ul><li><a href=\"https://www.kickstarter.com/projects/597507018/pebble-time-awesome-smartwatch-no-compromises\">Pebble Time</a></li><li><a href=\"http://9to5mac.com/2015/01/30/review-cellulon-picopro-pico-projector/\">Cellulon’s PicoPro is an iPhone 6 Plus-sized, battery-powered HD projector</a></li><li><a href=\"http://samsungdesign.tumblr.com/\">Original Designs by Samsung</a></li><li><a href=\"https://www.youtube.com/watch?v=WIVeemZ0_e4&amp;utm_content=buffer0204d&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer\">Hubless Foldable Bike Prototype</a></li><li><a href=\"http://hackaday.com/2012/09/28/making-logic-gates-out-of-crabs/\">Making logic gates out of crabs</a></li><li><a href=\"http://lastucase.com/\">Lastucase</a></li><li><a href=\"http://devicelab.vanamco.com/\">Device Lab Stand</a></li><li><a href=\"http://www.marco.org/2015/01/04/apple-lost-functional-high-ground\">Apple has lost the functional high ground</a></li><li><a href=\"http://www.lofibucket.com/articles/oscilloscope_quake.html\">Quake on an oscilloscope: A technical report</a></li><li><a href=\"http://www.theguardian.com/uk-news/2014/dec/23/photograph-1926-shows-selfie-stick-older-than-meets-eye\">Photograph from 1926 shows selfie stick older than meets the eye</a></li><li><a href=\"https://www.youtube.com/watch?v=J9b0J29OzAU&amp;utm_content=buffer2a2f1&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer\">World's Simplest Electric Train</a></li><li><a href=\"https://github.com/Overv/vramfs\">Overv/vramfs</a></li><li><a href=\"http://blog.memsql.com/cache-is-the-new-ram/\">Cache is the new RAM</a></li><li><a href=\"http://www.geek.com/news/german-cloud-provider-will-heat-your-house-if-you-let-them-install-a-server-1609178/\">German cloud provider will heat your house if you let them install a server</a></li></ul><div><br /></div><h3>Embedded</h3><ul><li><a href=\"http://dashboard.sidlee.com/\">Sid Lee Dashboard</a> - Based on Arduino.</li><li><a href=\"http://www.intel.com/content/www/us/en/compute-stick/intel-compute-stick.html\">Intel® Compute Stick</a></li><li><a href=\"http://ultrakeet.com.au/write-ups/microcontrollers-not-allowed\">Trolling with a microcontroller</a></li><li><a href=\"http://www.theregister.co.uk/2015/02/02/raspberry_pi_model_2/\">Turbocharged quad-core Raspberry Pi 2 unleashed, global geekgasm likely</a></li><li><a href=\"http://dev.windows.com/en-us/featured/raspberrypi2support\">Microsoft Windows on Devices – Raspberry Pi 2</a></li></ul><div><br /></div><h2>Art</h2><ul><li><a href=\"https://www.youtube.com/watch?v=Q3oItpVa9fs&amp;utm_content=bufferca733&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer\">CYMATICS: Science Vs. Music</a></li><li><a href=\"http://geek-and-poke.com/geekandpoke/2014/12/22/developers\">Developers at an Exhibition</a></li><li><a href=\"http://www.slate.com/blogs/behold/2015/02/19/juuso_westerlund_photographs_finnish_karaoke_singers_in_his_series_karaoke.html\">Juuso Westerlund photographs Finnish karaoke singers in his series, “Karaoke Nation.”</a></li><li><a href=\"http://buffalobillgates.tumblr.com/post/107015411396/title-by-wade-cotton-and-his-group-of-friends\">Buffalo Bill Gates</a></li><li><a href=\"http://www.expat-finland.com/living_in_finland/fingerpori.html\">Fingerpori in English! Finland's famous comic strip</a></li><li><a href=\"http://chriscummins.cc/s/genetics/\">Grow Your Own Picture</a></li><li><a href=\"http://blog.wolfram.com/2014/12/01/extending-van-goghs-starry-night-with-inpainting/\">Extending Van Gogh’s Starry Night with Inpainting</a></li><li><a href=\"http://www.boredpanda.com/wild-fox-photography-ivan-kislov/\">Russian Miner Spends His Breaks Taking Photos Of Foxes In The Arctic Circle</a></li><li><a href=\"http://www.slate.com/blogs/future_tense/2014/11/14/in_nuenen_designer_daan_roosegaarde_created_a_solar_powered_cycle_path_inspired.html\">In Nuenen, designer Daan Roosegaarde created a solar-powered cycle path inspired by van Gogh's The Starry Night</a></li><li><a href=\"https://www.tylerlhobbs.com/writings/programming-artwork\">Algorithmic Art</a></li></ul><div><br /></div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1424937660000,"created_by":1,"updated_at":1424937704544,"updated_by":1,"published_at":1424937660000,"published_by":1},{"id":1,"title":"How to Publish and Maintain NPM Packages?","slug":"how_to_publish_and_maintain_npm_packages","markdown":"It is almost amazing how popular &#xA0;is these days. At the time of writing it has whopping 127k packages! It is useful beyond Node.js and people use it increasingly on frontend side as well. Tools such as browserify and webpack can hook into packages hosted on NPM. You can even build a package manager on top of NPM but that goes sort of meta. \n\nAs I have been publishing and maintaining NPM packages for a few years I thought it might be a good idea to document some of my practices. It is a simple system to use as long as you are aware of a couple of tricks. \n\n## Initializing a NPM Project\n<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\">![](http://2.bp.blogspot.com/-x3XoYgO8cYM/VO2RXGz-reI/AAAAAAAACgs/TXH7cfC0J1A/s1600/initializing.jpg)\n\n</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"> by Wonderlane \n[Technical Difficulties](https://www.flickr.com/photos/71401718@N00/7512411298/)</td></tr></tbody></table>NPM relies on a configuration file, _package.json_. It is placed on the project root. NPM cli provides a handy utility for generating it, . Simply answer the questions and you should end up with a _package.json_[npm init](https://docs.npmjs.com/cli/init) \n\n### Introduction to Mankees\nWhen I&apos;m starting a new project I like to cheat a bit. Years ago I developed [mankees](https://github.com/mankees/cli) \nOne of the first script I wrote for the environment was known as . It is a simple tool that can generate project scaffolding for you. It parses _~/.mankees/config.json_ and then injects those values to Handlebars templates of the project you want to create. It is simple enough to create your own templates. \n\nI have set up basic _README.md_,_ package.json_,_ LICENSE_,_ .travis.yml _and_ .gitignore_ in my basic Node template. It can be tedious to set each by hand so this saves some effort. All I need to do is to hit **mankees init node {project_name}**. It will create a directory for me with basic details set up. After that I just need to code, set up GitHub and publish to NPM. \n\n### Other Scaffolding Tools\nI know there are more powerful scaffolding tools such as . For a simple Node package they seem a bit too much. I rather take something simple and add than take something complex and remove. Less effort. \n\n### Set Up Version Control\nAfter you have set up your basic project you should hook up Git. The basic steps include **git init**, committing your work as an initial commit and pushing the work to some repository (ie. set up something at GitHub or Bitbucket). \n\n[Yeoman](http://yeoman.io/)<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\">![](http://2.bp.blogspot.com/-LoeoOIcW5FI/VO2RvvuVazI/AAAAAAAACg0/pW6axOBHpg0/s1600/package.jpg)\n\n</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"> by Diana Schnuth \n[Node packages come in all shapes and sizes](https://www.flickr.com/photos/55777169@N00/8318081089/)</td></tr></tbody></table>_package.json_ contains actually quite much information. gives you a good idea of what each field does. You should aim to fill the most. It is particularly important you make the _main_[Nodejitsu&apos;s interactive guide](http://browsenpm.org/package.json) \nIf there&apos;s a cli script included, you should set _bin_. If the cli command name matches your package name, you can enter a string there directly, otherwise you should use an object. \nAs NPM won&apos;t allow multiple packages with same name, you should check out&#xA0;_https://www.npmjs.com/package/{your package name}_&#xA0;before settling on one. Sometimes this can be the most difficult part of the project as many common names have been already taken. \nAt times people like to name their Git repository with node- prefix. This is less ambiguous than just sticking to a package name. The package will still retain its short, Node specific name. \n\n### Testing Configuration\nYou can test your _main_ and _bin_ configuration by using **npm link**. This will make your package available through Node environment and you should be able to access it anywhere. Just **require(&apos;yourproject&apos;)**&#xA0;within Node console or try to hit cli command(s) if you set it up. \nBefore publishing anything it can be a good idea to tag a release and update _package.json_. As doing these steps manually is utterly boring, there&apos;s a little utility for this. Simply hit **npm version {version}&#xA0;**(example:&#xA0;**npm version 0.1.0**). This will perform the steps for you and create a git commit with the version.> If you haven&apos;t registered to NPM yet, you should set up an account at . To make the cli aware of this, you should use **[npm adduser](https://docs.npmjs.com/cli/adduser)**. &#xA0;In case you want to share authorship of a package with someone other, you should use [**npm owner**](https://docs.npmjs.com/cli/owner) \n\n### Publishing a Package\nThe next step is the one you have been waiting for. Hit **[npm publish](https://docs.npmjs.com/cli/publish)** and your package should appear to the registry. You can verify this by checking out&#xA0;_https://www.npmjs.com/package/{your package name}_. Besides this you should remember to hit **git push** and **git push --tags**. \n\n## Maintaining a NPM Package\nThere are a couple of simple things to keep in mind when maintaining a NPM package. It will make it a lot easier for you if you respect the [semver](http://semver.org/) \n\n### Publishing Something to Test\nIn case you want to publish something for public to test, you can do this in two simple steps. First hit **npm version {version}-beta**. After that publish like this: **npm publish --tag beta** . **npm install** will still point at the stable release. To install beta you would hit&#xA0;**npm install {your package name}@beta**. You can of course vary the naming and be more specific but this should give you the basic idea. \n\n### Types of Dependencies\n<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\">![](http://4.bp.blogspot.com/-Qr1rjyqcGa4/VO2SIv67HOI/AAAAAAAACg8/w4ZuLVgPsyw/s1600/deps.jpg)\n\n</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"> by Linux Screenshots \n[Dependencies](https://www.flickr.com/photos/91795203@N02/9164372176/)</td></tr></tbody></table>NPM packages come with three kind of dependencies. Direct _dependencies_, _devDependencies_ and _peerDependencies_. Direct ones get installed with your package. \nDevelopment dependencies are something that you are meant to use only when developing the package itself (ie. testing utilities and such). Node will install both by default. You can avoid fetching development dependencies by hitting **npm install --production**. \n[Peer dependencies](http://blog.nodejs.org/2013/02/07/peer-dependencies/)_ \n__peerDependencies_ solve this problem. By setting up a peer dependency you defer the problem to a higher level. If you are developing for instance a React component, this would be the right way to go. \nDependencies come with some further complexity, namely dependency version declarations. NPM defaults to caret (^). In addition it is possible to use tilde (~). Given this topic can get rather complicated fast, you should study [node-semver](https://github.com/npm/node-semver#semver1----the-semantic-versioner-for-npm) \nSometimes it may be handy to point to some dependency directly (say it&apos;s under development, not at NPM etc.). In case of GitHub, you can simply state a dependency version like this: {_github user}/{project}#{reference}_. Reference is optional and may be commit hash, tag or branch. \n\n### Dealing with Scripts\nNote that if install some testing tool through devDependencies, you can point at it directly within scripts section. Ie. in case of webpack you would do something like this:\n\n1. **npm i webpack --save-dev** (--save and --save-peer work too)\n2. **&quot;scripts&quot;: {&quot;build&quot;: &quot;webpack&quot;}**&#xA0;at _package.json_\n3. **npm run build**&#xA0;- This works because NPM will add webpack build tool to the PATH temporarily when you hit **npm run**. \n\n### Updating Project Dependencies\nAs part of maintaining is about worrying about dependencies, I have set up a mankees script for that purpose. **mankees update_deps** bumps up project dependencies for me. It is bit of a nuclear option but it has been a great timesaver for me. [npm-check-updates](https://www.npmjs.com/package/npm-check-updates) \n\n### Services Helping with Maintenance\nThere is a lot to worry about when developing packages. It gets only worse when you get to frontend side since then you may have to support multiple different environments. I won&apos;t dig into that, however, as [Alexey Migutsky has done so in detail](http://www.fse.guru/isomorphic-javascript-libraries)\n\n* [SauceLabs](https://saucelabs.com/)\n* [Travis](https://travis-ci.org/)\n* , , [Gemnasium](https://gemnasium.com/) \n\n## Conclusion\nI hope this post gave you some idea how to deal with NPM packages. In the end it&apos;s not complicated once you learn the basic commands. The hard part is in figuring all of this out. \n[NPM](https://www.npmjs.com/)","html":"It is almost amazing how popular <a href=\"https://www.npmjs.com/\">NPM</a>&nbsp;is these days. At the time of writing it has whopping 127k packages! It is useful beyond Node.js and people use it increasingly on frontend side as well. Tools such as browserify and webpack can hook into packages hosted on NPM. You can even build a package manager on top of NPM but that goes sort of meta.<br /><br />As I have been publishing and maintaining NPM packages for a few years I thought it might be a good idea to document some of my practices. It is a simple system to use as long as you are aware of a couple of tricks.<br /><br /><h2>Initializing a NPM Project</h2><div><table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://2.bp.blogspot.com/-x3XoYgO8cYM/VO2RXGz-reI/AAAAAAAACgs/TXH7cfC0J1A/s1600/initializing.jpg\" imageanchor=\"1\" style=\"clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"><img border=\"0\" src=\"http://2.bp.blogspot.com/-x3XoYgO8cYM/VO2RXGz-reI/AAAAAAAACgs/TXH7cfC0J1A/s1600/initializing.jpg\" height=\"213\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><a href=\"https://www.flickr.com/photos/71401718@N00/7512411298/\">Technical Difficulties</a> by Wonderlane<br />(CC BY)</td></tr></tbody></table>NPM relies on a configuration file, <i>package.json</i>. It is placed on the project root. NPM cli provides a handy utility for generating it, <a href=\"https://docs.npmjs.com/cli/init\">npm init</a>. Simply answer the questions and you should end up with a <i>package.json</i>. Don't worry about all the questions, you can tweak the file later.</div><div><br /><h3>Introduction to Mankees</h3>When I'm starting a new project I like to cheat a bit. Years ago I developed <a href=\"https://github.com/mankees/cli\">mankees</a>, a little tool that makes it easier to script on top of Node. It comes with a little package manager that has been developed on top of NPM. It just does its best to hide this fact.</div><div><br />One of the first script I wrote for the environment was known as <a href=\"https://github.com/mankees/init\">init</a>. It is a simple tool that can generate project scaffolding for you. It parses <i>~/.mankees/config.json</i> and then injects those values to Handlebars templates of the project you want to create. It is simple enough to create your own templates.<br /><br />I have set up basic <i>README.md</i>,<i> package.json</i>,<i> LICENSE</i>,<i> .travis.yml </i>and<i> .gitignore</i> in my basic Node template. It can be tedious to set each by hand so this saves some effort. All I need to do is to hit <b>mankees init node {project_name}</b>. It will create a directory for me with basic details set up. After that I just need to code, set up GitHub and publish to NPM.<br /><br /><h3>Other Scaffolding Tools</h3>I know there are more powerful scaffolding tools such as <a href=\"http://yeoman.io/\">Yeoman</a>. For a simple Node package they seem a bit too much. I rather take something simple and add than take something complex and remove. Less effort.<br /><br /><h3>Set Up Version Control</h3>After you have set up your basic project you should hook up Git. The basic steps include <b>git init</b>, committing your work as an initial commit and pushing the work to some repository (ie. set up something at GitHub or Bitbucket).<br /><br /><h2>Publishing to NPM</h2></div><table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://2.bp.blogspot.com/-LoeoOIcW5FI/VO2RvvuVazI/AAAAAAAACg0/pW6axOBHpg0/s1600/package.jpg\" imageanchor=\"1\" style=\"clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"><img border=\"0\" src=\"http://2.bp.blogspot.com/-LoeoOIcW5FI/VO2RvvuVazI/AAAAAAAACg0/pW6axOBHpg0/s1600/package.jpg\" height=\"320\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><a href=\"https://www.flickr.com/photos/55777169@N00/8318081089/\">Node packages come in all shapes and sizes</a> by Diana Schnuth<br />(CC BY-NC-SA)</td></tr></tbody></table><div><i>package.json</i> contains actually quite much information. <a href=\"http://browsenpm.org/package.json\">Nodejitsu's interactive guide</a> gives you a good idea of what each field does. You should aim to fill the most. It is particularly important you make the <i>main</i> field point at the entry point of your package.</div><div><br /></div><div>If there's a cli script included, you should set <i>bin</i>. If the cli command name matches your package name, you can enter a string there directly, otherwise you should use an object.</div><div><br /></div><div>As NPM won't allow multiple packages with same name, you should check out&nbsp;<i>https://www.npmjs.com/package/{your package name}</i>&nbsp;before settling on one. Sometimes this can be the most difficult part of the project as many common names have been already taken.</div><div><br /></div><div>At times people like to name their Git repository with node- prefix. This is less ambiguous than just sticking to a package name. The package will still retain its short, Node specific name.</div><div><br /></div><h3>Testing Configuration</h3><div>You can test your <i>main</i> and <i>bin</i> configuration by using <b>npm link</b>. This will make your package available through Node environment and you should be able to access it anywhere. Just <b>require('yourproject')</b>&nbsp;within Node console or try to hit cli command(s) if you set it up.</div><div><br /></div><div>Before publishing anything it can be a good idea to tag a release and update <i>package.json</i>. As doing these steps manually is utterly boring, there's a little utility for this. Simply hit <b>npm version {version}&nbsp;</b>(example:&nbsp;<b>npm version 0.1.0</b>). This will perform the steps for you and create a git commit with the version.</div><blockquote class=\"tr_bq\">If you haven't registered to NPM yet, you should set up an account at <a href=\"https://www.npmjs.com/signup\">NPM site</a>. To make the cli aware of this, you should use <b><a href=\"https://docs.npmjs.com/cli/adduser\">npm adduser</a></b>. &nbsp;In case you want to share authorship of a package with someone other, you should use <a href=\"https://docs.npmjs.com/cli/owner\"><b>npm owner</b></a>.</blockquote><br /><h3>Publishing a Package</h3><div>The next step is the one you have been waiting for. Hit <b><a href=\"https://docs.npmjs.com/cli/publish\">npm publish</a></b> and your package should appear to the registry. You can verify this by checking out&nbsp;<i>https://www.npmjs.com/package/{your package name}</i>. Besides this you should remember to hit <b>git push</b> and <b>git push --tags</b>.</div><div><br /></div><h2>Maintaining a NPM Package</h2><div>There are a couple of simple things to keep in mind when maintaining a NPM package. It will make it a lot easier for you if you respect the <a href=\"http://semver.org/\">semver</a>. This will make it simpler and safer to consume the package.</div><div><br /></div><h3>Publishing Something to Test</h3><div>In case you want to publish something for public to test, you can do this in two simple steps. First hit <b>npm version {version}-beta</b>. After that publish like this: <b>npm publish --tag beta</b> . <b>npm install</b> will still point at the stable release. To install beta you would hit&nbsp;<b>npm install {your package name}@beta</b>. You can of course vary the naming and be more specific but this should give you the basic idea.</div><div><br /></div><h3>Types of Dependencies</h3><table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/-Qr1rjyqcGa4/VO2SIv67HOI/AAAAAAAACg8/w4ZuLVgPsyw/s1600/deps.jpg\" imageanchor=\"1\" style=\"clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"><img border=\"0\" src=\"http://4.bp.blogspot.com/-Qr1rjyqcGa4/VO2SIv67HOI/AAAAAAAACg8/w4ZuLVgPsyw/s1600/deps.jpg\" height=\"320\" width=\"312\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><a href=\"https://www.flickr.com/photos/91795203@N02/9164372176/\">Dependencies</a> by Linux Screenshots<br />(CC BY)</td></tr></tbody></table><div>NPM packages come with three kind of dependencies. Direct <i>dependencies</i>, <i>devDependencies</i> and <i>peerDependencies</i>. Direct ones get installed with your package.</div><div><br /></div><div>Development dependencies are something that you are meant to use only when developing the package itself (ie. testing utilities and such). Node will install both by default. You can avoid fetching development dependencies by hitting <b>npm install --production</b>.</div><div><br /></div><div><a href=\"http://blog.nodejs.org/2013/02/07/peer-dependencies/\">Peer dependencies</a> are most lenient of these. Suppose you have a plugin but you would rather not depend on the environment directly. In the worst case you could end up with a project that has multiple different versions of the host environment due to dependency declarations. That's definitely not good.</div><div><i><br /></i></div><div><i>peerDependencies</i> solve this problem. By setting up a peer dependency you defer the problem to a higher level. If you are developing for instance a React component, this would be the right way to go.</div><div><br /></div><div>Dependencies come with some further complexity, namely dependency version declarations. NPM defaults to caret (^). In addition it is possible to use tilde (~). Given this topic can get rather complicated fast, you should study <a href=\"https://github.com/npm/node-semver#semver1----the-semantic-versioner-for-npm\">node-semver</a> with care. That's where it all stems from.</div><div><br /></div><div>Sometimes it may be handy to point to some dependency directly (say it's under development, not at NPM etc.). In case of GitHub, you can simply state a dependency version like this: {<i>github user}/{project}#{reference}</i>. Reference is optional and may be commit hash, tag or branch.</div><div><br /></div><h3>Dealing with Scripts</h3><div>Note that if install some testing tool through devDependencies, you can point at it directly within scripts section. Ie. in case of webpack you would do something like this:</div><div><ol><li><b>npm i webpack --save-dev</b> (--save and --save-peer work too)</li><li><b>\"scripts\": {\"build\": \"webpack\"}</b>&nbsp;at <i>package.json</i></li><li><b>npm run build</b>&nbsp;- This works because NPM will add webpack build tool to the PATH temporarily when you hit <b>npm run</b>.</li></ol><div><br /></div></div><h3>Updating Project Dependencies</h3><div>As part of maintaining is about worrying about dependencies, I have set up a mankees script for that purpose. <b>mankees update_deps</b> bumps up project dependencies for me. It is bit of a nuclear option but it has been a great timesaver for me. <a href=\"https://www.npmjs.com/package/npm-check-updates\">npm-check-updates</a> seems like another good alternative.</div><div><br /></div><div><br /></div><h3>Services Helping with Maintenance</h3><div>There is a lot to worry about when developing packages. It gets only worse when you get to frontend side since then you may have to support multiple different environments. I won't dig into that, however, as <a href=\"http://www.fse.guru/isomorphic-javascript-libraries\">Alexey Migutsky has done so in detail</a>. Instead I'll link you to a various of services to check out and apply as you feel necessary:</div><div><ul><li><a href=\"https://saucelabs.com/\">SauceLabs</a> - SauceLabs runs your frontend tests (Selenium etc.) against multiple browsers. Free for open source. In addition they have a badge available you can include at project README.</li><li><a href=\"https://travis-ci.org/\">Travis</a> - Travis is able to run your tests against multiple Node environments. This can reveal issues with specific versions. Again, there is a badge available and Travis will be able to check GitHub PRs automatically.</li><li><a href=\"https://david-dm.org/\">David</a>, <a href=\"https://www.versioneye.com/\">VersionEye</a>, <a href=\"https://gemnasium.com/\">Gemnasium</a>&nbsp;- These services are able to check your package dependencies and give warnings accordingly. There are badges available. I have been using Gemnasium myself. It gives me a weekly digest. In addition it warns about possible security issues.</li></ul></div><div><br /></div><h2>Conclusion</h2><div>I hope this post gave you some idea how to deal with NPM packages. In the end it's not complicated once you learn the basic commands. The hard part is in figuring all of this out.</div><div><br /></div><div>It would be interesting to hear what sort of workflow and tooling you use to make it easier to develop and maintain Node packages.</div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1424855880000,"created_by":1,"updated_at":1424861977682,"updated_by":1,"published_at":1424855880000,"published_by":1},{"id":2,"title":"Canva - a Light Design App for Non-Designers","slug":"canva_a_light_design_app_for_non_designers","markdown":"<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\">![](http://1.bp.blogspot.com/-bKnZTJKj9lA/VOsTm_ibEGI/AAAAAAAACgc/nWNN20dvr54/s1600/clearthedecks_small.jpg)\n\n</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">A little poster I did for \nmy frontend loving friends</td></tr></tbody></table>Design is one of those things that looks deceptively simple but that can be hard to get right. It can be daunting to get started. As I happen to be interested in the topic, I tried out a little iPad app known as&#xA0;. They provide the same app as a web service and the app and the service are kept in sync. \nI know there are tons of design apps out there. What makes Canva interesting from my point of view are . You simply walk through these tutorials by using the app. They highlight some basic concepts of design and give certain confidence to a beginning designer. Even better [they have whole workshops available](https://designschool.canva.com/teaching-materials/) \nThe app provides features from a casual vector editor, makes it easy to manipulate photos on the go and contains an easy to search photo gallery. It seems to me that is where they make their money out of. Non-watermarked photos seem to cost dollar a piece. Fortunately you may upload your own imagery to the service so I don&apos;t find that restricting. \n[Canva](https://www.canva.com/)","html":"<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://1.bp.blogspot.com/-bKnZTJKj9lA/VOsTm_ibEGI/AAAAAAAACgc/nWNN20dvr54/s1600/clearthedecks_small.jpg\" imageanchor=\"1\" style=\"clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"><img border=\"0\" src=\"http://1.bp.blogspot.com/-bKnZTJKj9lA/VOsTm_ibEGI/AAAAAAAACgc/nWNN20dvr54/s1600/clearthedecks_small.jpg\" height=\"320\" width=\"226\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">A little poster I did for<br />my frontend loving friends</td></tr></tbody></table>Design is one of those things that looks deceptively simple but that can be hard to get right. It can be daunting to get started. As I happen to be interested in the topic, I tried out a little iPad app known as&nbsp;<a href=\"https://www.canva.com/\">Canva</a>. They provide the same app as a web service and the app and the service are kept in sync.<div><br /></div><div>I know there are tons of design apps out there. What makes Canva interesting from my point of view are <a href=\"https://designschool.canva.com/tutorials/\">the free tutorials they provide</a>. You simply walk through these tutorials by using the app. They highlight some basic concepts of design and give certain confidence to a beginning designer. Even better <a href=\"https://designschool.canva.com/teaching-materials/\">they have whole workshops available</a>.</div><div><br /></div><div>The app provides features from a casual vector editor, makes it easy to manipulate photos on the go and contains an easy to search photo gallery. It seems to me that is where they make their money out of. Non-watermarked photos seem to cost dollar a piece. Fortunately you may upload your own imagery to the service so I don't find that restricting.</div><div><br /></div><div>I am sure you will start hitting the limitations of the app at some point, especially if you are a professional designer. For an enthusiast it is a good option as it combines many of the common tasks into single app and allows you to get something decent looking done fast. Even if you don't end up using the app just going through those tutorials is probably worth the time investment.</div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1424692260000,"created_by":1,"updated_at":1424692289651,"updated_by":1,"published_at":1424692260000,"published_by":1},{"id":3,"title":"Introducing Reactabular, react-pagify and react-ghfork","slug":"introducing_reactabular_react_pagify_and_react_ghfork","markdown":"I&apos;ve been doing React component development a while. This has been a good chance to update my skillset. In the process I&apos;ve become even greater fan of . \n\nOne sign of this is that I&apos;ve collaborated a bit with Christian Alfoni on . You should check it out if either topic sounds interesting to you. Feedback on the content would be welcome. \n\n## Reactabular - Spectabular tables for React\nI spent most of the time working on . I know people have written table libraries for React already. I also came by a monster known as . You could describe my library as an antithesis of it. I aimed for a simple API that allows extension without having to hack the library itself. This is something I felt was lacking in many available solutions. I took some inspiration from them of course. \n\nYou can build a full-featured table with pagination, search, filtering and editing (inline, modal) using . It will take a little bit of work but on the plus side, you get flexibility. If you are not happy with the default solutions, you can just swap them with something that suits your needs better. \n\nThe nice thing about Reactabular is that given it&apos;s so flexible, you can hook it with Flux architecture with little effort. I don&apos;t have an example available of this but it should be just a matter of replacing some setStates with something else. \n\n## react-pagify and react-ghfork\nAs it usually happens when you develop a component, you might end up doing a couple of others as a byproduct. In this case &#xA0;and are such components. \n\nreact-pagify provides simple semantics for building a pagination control. I designed it to work with cases where you have a large amount of pages. Instead of generating a link for each I made it possible to define how many links to show at the beginning, the end and around the current page. There is some additional logic to deal with possible overlaps. Overall it&apos;s not the most complex project out there but then a pagifier doesn&apos;t have to be. \n\nreact-ghfork allows you to build those &quot;Fork me at GitHub&quot; banners without too much hassle. I built it on top of and simply provided a sane API for it. \n\n## Lessons Learned\nEven if the projects don&apos;t sound earth-shattering, doing them was a good learning experience. I learned a good gh-pages flow (see project **package.json**) and learned to set up more complicated configurations using Webpack. It seems like a good pick for packaging React modules as it gives UMD output without too much hassle. \n\n## Other Releases - grunt-umd, libumd and pypandoc\nSpeaking of UMD, I pushed out new versions of and out. Especially latter is handy if you need to deal with UMD transformation on tooling level. Both projects have reached a stable phase. \n\nThe same applies for [pypandoc](https://github.com/bebraw/pypandoc)","html":"I've been doing React component development a while. This has been a good chance to update my skillset. In the process I've become even greater fan of <a href=\"http://webpack.github.io/\">Webpack</a>.<br /><br />One sign of this is that I've collaborated a bit with Christian Alfoni on <a href=\"http://christianalfoni.github.io/react-webpack-cookbook/\">a little cookbook about React and Webpack</a>. You should check it out if either topic sounds interesting to you. Feedback on the content would be welcome.<br /><br /><br /><h2>Reactabular - Spectabular tables for React</h2>I spent most of the time working on <a href=\"http://bebraw.github.io/reactabular/\">Reactabular</a>. I know people have written table libraries for React already. I also came by a monster known as <a href=\"http://www.datatables.net/\">jQuery DataTables</a>. You could describe my library as an antithesis of it. I aimed for a simple API that allows extension without having to hack the library itself. This is something I felt was lacking in many available solutions. I took some inspiration from them of course.<br /><br />You can build a full-featured table with pagination, search, filtering and editing (inline, modal) using <a href=\"http://bebraw.github.io/reactabular/\">Reactabular</a>. It will take a little bit of work but on the plus side, you get flexibility. If you are not happy with the default solutions, you can just swap them with something that suits your needs better.<br /><br />The nice thing about Reactabular is that given it's so flexible, you can hook it with Flux architecture with little effort. I don't have an example available of this but it should be just a matter of replacing some setStates with something else.<br /><br /><br /><h2>react-pagify and react-ghfork</h2>As it usually happens when you develop a component, you might end up doing a couple of others as a byproduct. In this case <a href=\"http://bebraw.github.io/react-pagify/\">react-pagify</a>&nbsp;and <a href=\"http://bebraw.github.io/react-ghfork/\">react-ghfork</a> are such components.<br /><br />react-pagify provides simple semantics for building a pagination control. I designed it to work with cases where you have a large amount of pages. Instead of generating a link for each I made it possible to define how many links to show at the beginning, the end and around the current page. There is some additional logic to deal with possible overlaps. Overall it's not the most complex project out there but then a pagifier doesn't have to be.<br /><br />react-ghfork allows you to build those \"Fork me at GitHub\" banners without too much hassle. I built it on top of <a href=\"http://simonwhitaker.github.io/github-fork-ribbon-css/\">Simon Whitaker's definitions</a> and simply provided a sane API for it.<br /><br /><br /><h2>Lessons Learned</h2>Even if the projects don't sound earth-shattering, doing them was a good learning experience. I learned a good gh-pages flow (see project <b>package.json</b>) and learned to set up more complicated configurations using Webpack. It seems like a good pick for packaging React modules as it gives UMD output without too much hassle.<br /><br /><br /><h2>Other Releases - grunt-umd, libumd and pypandoc</h2>Speaking of UMD, I pushed out new versions of <a href=\"https://github.com/bebraw/grunt-umd\">grunt-umd</a> and <a href=\"https://github.com/bebraw/libumd\">libumd</a> out. Especially latter is handy if you need to deal with UMD transformation on tooling level. Both projects have reached a stable phase.<br /><br />The same applies for <a href=\"https://github.com/bebraw/pypandoc\">pypandoc</a>, a pandoc wrapper I maintain for Python. If you need to deal with document conversions, check it out.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1423570620000,"created_by":1,"updated_at":1423570629835,"updated_by":1,"published_at":1423570620000,"published_by":1},{"id":4,"title":"Thoughts on the Future of Web Development","slug":"thoughts_on_the_future_of_web_development","markdown":"Since , I&apos;ve had time to level up my development skills and reflect. You could say frontend development tools move forward quite fast. The same goes for backend of course. \n\n## On Build Tools\nDuring the past few years I&apos;ve moved from Grunt to Gulp and Browserify and then onto Webpack. The smart guys have stuck with Make. You can even write simple configuration directly to package.json scripts field but I tend to do that only in panic. My sweet spot is a combination of Gulp and Webpack. \n\n### Grunt - It&apos;s Magic\n<iframe allowfullscreen frameborder=\"0\" height=\"105\" src=\"//www.youtube.com/embed/mx5tSktm7zw\" style=\"float: right;\" width=\"140\"></iframe> The problem with Grunt is that it&apos;s filled with magic. That&apos;s never good. You don&apos;t want to have to maintain a three hundred line Gruntfile. It&apos;s doable but not particularly fun. \n\nGulp is a step towards something better. After all it&apos;s just about piping. You can . Gulp isn&apos;t without its issues but it&apos;s a significant step ahead. Given it&apos;s just JavaScript, you can always hack it if the going gets too tough. \n\n### Browserify - a Step Ahead\nCompared to RequireJS, , Browserify is a step ahead. The primary benefit over RequireJS is the fact that you can continue writing code in CommonJS module format. You can also directly hook into NPM infrastructure which is a massive bonus. \n\n### Webpack - The Holy Grail?\nWebpack can be considered the next logical step. What if instead of bundling just JavaScript you had a tool that could bundle pretty much anything including CSS, LESS, SASS, CoffeeScript, Jade, whatnot? Well, this is exactly what Webpack is meant for. Instead of having to build configuration in your Gruntfile or Gulpfile you can just let Webpack deal with it. \n\nYou still get the goodies Browserify gives you (NPM, bundling) and then some! \n\nIt can even create bundles per page for you. No longer you are forced to download everything on the first load. Instead it will split up the source appropriately and provide partial loads. This can improve site performance massively especially if you have a lot of dependencies split on multiple views. covers the basic approach. I&apos;m aware you might be able to achieve something similar using other tooling but so far this seems very novel approach to me. \n\nWebpack works very well with and takes your React development to the next level. Developing using good tooling makes you work so much faster it&apos;s almost unbelievable. \n\nAs I&apos;m not an absolute guru with Webpack yet I prefer to use some other tooling, such as Gulp, to copy distribution files around. No doubt there are ways to manage just with Webpack, though, but right tools for right tasks and all that. \n\n### The Future\nIt is difficult to say where build tools might be moving. Perhaps yet another tool comes out and kicks Gulp in shins in turn? Too early to say. Webpack seems to solve the biggest issue for me and no doubt will become more popular as people discover it. \n\nHot loading might become more than just a development goodie. At some point people will start doing hot loading in production and people will receive updates to JavaScript as they use the app without having to reload. No doubt that opens new cans of worms but in theory that sounds very fun! \n\n## On Libraries and Frameworks\nOn library/framework side the route has been from jQuery to Angular and finally React and friends. You could say jQuery is the PHP of JavaScript. It gets the job done and it&apos;s everywhere. Unfortunately it doesn&apos;t scale that well for larger scale development. If you need to spruce things up a bit on a static site it&apos;s a good pick but I wouldn&apos;t develop a JavaScript driven site using it if I can avoid that. \n\n### Angular over jQuery\nAngular can be considered the next logical step over jQuery and you can even use them together. Sometimes you might want to avoid jQuery altogether. In fact often it&apos;s quite trivial to implement something in Angular that would require a yet another plugin in jQuery. I would say Angular is a very good fit for small projects and prototypes. I have my doubts about scaling. \n\nGiven Angular is a framework it provides tons of functionality. The problems begin once you hit the boundaries. What if instead of loading each and every dependency the way Angular expects you want to start loading them dynamically per page? Let&apos;s just say you have just found a world of pain. \n\nThis is a recurring theme during explorations to the Angular world. It works just fine until you hit some sharp edge and hurt yourself. Particularly directives hide a lot of complexity and it&apos;s easy to get them wrong. Performance-wise watchers can bite you and you will need to be very careful with them. It may be better to avoid them altogether and consider some alternative approaches. \n\nIn fact people are experimenting with ways to simplify Angular development by borrowing ideas from the world of React. Two-way binding isn&apos;t your friend always. Some might even go as far and say it&apos;s an anti-pattern and I agree. If you can get something done with one-way binding, prefer that to two-way. It&apos;s just less headache for everyone. \n\n### React.js over Angular\nThe lack of two-way binding without helpers is one of the strong points of React. Given the flow goes to one direction, it is easy to reason about. As vanilla React deals with just the view portion of an application, you will eventually run into questions like how to deal with models, how should I share data between my components and so on. \n\nTo make React shine, you will need to complement with a couple of libraries. I&apos;ve stuck with react-router, axios (http client) and Reflux. In a future stack I might replace axios with a Swagger client that will generate the frontend API for me automatically. I&apos;ll get back to Swagger in a bit. \n\n### Flux Architecture and Reflux\n&#xA0;starts where vanilla React stops. In short its implementations and derivatives allow you to scale up from mere components. I have found a particularly light and smart implementation. It answers to the problems I highlighted very effectively. The idea is quite simple. Your components may trigger Actions. Actions in turn modify Stores in some way. The state of stores gets propagated to your components and the cycle is complete. \n\nLet&apos;s say we&apos;re modeling selection. I would define a SelectionAction and a SelectionStore. SelectionAction would contain actions select/deselect (accepts item to select/deselect). SelectionStore would maintain the state and on change let components know it changed. In vanilla React the state would be within components themselves. Here we have effectively extracted it out. \n\nBy default we are dealing with Singletons so to avoid sharing state you would have to create separate instances but this is more of a special case. Another thing to keep in mind is that if you want to deal with asynchronous operations (say backend query), you should implement these in a particular way. \n\nReflux provides a preEmit hook for this purpose. In case we implement a basic operation like fetch to initialize our Store, we would define three actions: fetch, fetchComplete, fetchError. fetchComplete and fetchError would then get triggered within the preEmit hook of fetch depending on the result. This in turn would cause our Store to either populate itself or deal with the error somehow. \n\nError in turn could be passed to some other place, say ErrorStore. You could then listen to that and show the errors to the user, log them and so on. The approach has definite power in it. \n\nOf course you would have to play around with React and Reflux to appreciate the approach. Initially it might feel that you are writing a lot of code for nothing but that&apos;s not the point. The goal here is not to minimize the amount of code written but rather to make it easy to follow and reason about. This is something that can get obscured in the Angular and jQuery world unless you are careful. \n\n### The Future\nIt feels like React and Reflux are steps towards a better future. So far I haven&apos;t had to worry about performance when dealing with React. There have been gotchas of course and the way you need to think in is quite different than what you might have gotten used to. The approach forces you to keep your entities small and pushes towards components. The cognitive load for creating new components is lower than in Angular as there are less concepts to worry about. \n\nOne of the main benefits of React is that it allows you to develop isomorphic JavaScript. Initial attempts have been made to allow Reflux support isomorphism as well. Instead of throwing a bit of HTML and JS to the client and expecting the client to construct the UI using JavaScript, in isomorphic approach we let the backend render HTML and perform initial queries needed. The frontend will then continue from this. \n\nIt&apos;s back to the same old but this time we are better prepared and gain benefits from the both world. Performance is better and SEO is improved. In a world where latency and poor SEO means lost sales and poorer visibility, what is there not to like? \n\nIf you want to take a peek at post-React world, you should study . There is still room for improvement and perhaps React was just a start. It would not surprise me a lot if it started feeling obsolete within a year or so. \n\n## On Backend\nAs frontend development has become more prominent during the past few years, the purpose of backend has changed. Now it&apos;s more about providing a sane API for frontend. RESTful patterns, HATEOAS and whatnot have appeared. You still have to deal with some basic concerns here such as authentication, authorization, business logic, validation and databases. In addition it would be awesome if there was decent documentation available. \n\n### Swagger - Definition for Your API\nLately I have been benchmarking . It is a definition that builds on top of . In short Swagger can be used to describe your API. Various tools can be developed on top of this description. For instance you get interactive API documentation and frontend API client for free. \n\nDepending on the tooling you choose there is of course actual work to do. You will still need to deal with plenty of concerns but using a definition such as Swagger has potential to simplify work. Using a tool like this avoids the pain of having to maintain documentation that is separate from your API. You could of course generate one based on an existing API but that&apos;s still extra work that can be avoided. \n\nFurthermore the approach has potential to simplify validation a lot. Given each data model is described in JSON Schema, you can validate against the same schema in both frontend and backend. If the schema changes, the code doesn&apos;t have to change necessarily. In ideal world migrations could be generated based on schema changes (JSON Diff?) and propagated to database automatically. In simple cases even databases could be generated without having to maintain duplicate definitions. \n\n### The Future\nIt would not surprise me a lot if usage of definitions like Swagger became more common. Especially when you are working alone or in a small team, you will want to avoid waste. Tools like this have a great potential to do that and allow you to be more agile and responsive towards changes. \nFrom frontend point of view having an API definition simplifies things as it means you don&apos;t need to maintain a separate API client. You just generate one based on the definition. Furthermore the definition gives you something to fuzz with. This in turn can be used to improve API quality and security. \n\n## Conclusion\nWeb development moves forward fast. It doesn&apos;t take long for new technologies to appear and old ones to stagnate. In a couple of short years we&apos;ve gone through a couple of build tools and there is no end in sight. I do wonder what on earth could replace Webpack and how? \nJust when it looked like Angular had &quot;won&quot;, backwards incompatibility of Angular 2.0 was announced. I have a feeling that might have stolen their thunder especially given the release date is still about a year away. In the meanwhile library based approaches will have time to evolve. I would bet on React and friends. \n[JSON Schema](http://json-schema.org/)","html":"Since <a href=\"http://www.nixtu.info/2014/07/how-i-learned-to-stop-worrying-and-love.html\">my previous post about React.js during the Summer</a>, I've had time to level up my development skills and reflect. You could say frontend development tools move forward quite fast. The same goes for backend of course.<br /><br /><h2>On Build Tools</h2>During the past few years I've moved from Grunt to Gulp and Browserify and then onto Webpack. The smart guys have stuck with Make. You can even write simple configuration directly to package.json scripts field but I tend to do that only in panic. My sweet spot is a combination of Gulp and Webpack.<br /><br /><h3>Grunt - It's Magic</h3><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"105\" src=\"//www.youtube.com/embed/mx5tSktm7zw\" style=\"float: right;\" width=\"140\"></iframe> The problem with Grunt is that it's filled with magic. That's never good. You don't want to have to maintain a three hundred line Gruntfile. It's doable but not particularly fun.<br /><br />Gulp is a step towards something better. After all it's just about piping. You can <a href=\"http://slides.com/contra/gulp\">pick it up in ten minutes</a>. Gulp isn't without its issues but it's a significant step ahead. Given it's just JavaScript, you can always hack it if the going gets too tough.<br /><br /><h3>Browserify - a Step Ahead</h3>Compared to RequireJS, <a href=\"http://www.nixtu.info/2011/02/how-to-structure-your-application-using.html\">which I blogged about years ago</a>, Browserify is a step ahead. The primary benefit over RequireJS is the fact that you can continue writing code in CommonJS module format. You can also directly hook into NPM infrastructure which is a massive bonus.<br /><br /><h3>Webpack - The Holy Grail?</h3>Webpack can be considered the next logical step. What if instead of bundling just JavaScript you had a tool that could bundle pretty much anything including CSS, LESS, SASS, CoffeeScript, Jade, whatnot? Well, this is exactly what Webpack is meant for. Instead of having to build configuration in your Gruntfile or Gulpfile you can just let Webpack deal with it.<br /><br />You still get the goodies Browserify gives you (NPM, bundling) and then some!<br /><br />It can even create bundles per page for you. No longer you are forced to download everything on the first load. Instead it will split up the source appropriately and provide partial loads. This can improve site performance massively especially if you have a lot of dependencies split on multiple views. <a href=\"https://github.com/petehunt/webpack-howto\">Pete Hunt's guide to Webpack</a> covers the basic approach. I'm aware you might be able to achieve something similar using other tooling but so far this seems very novel approach to me.<br /><br />Webpack works very well with <a href=\"https://github.com/gaearon/react-hot-loader\">Dan Abramov's react-hot-loader</a> and takes your React development to the next level. Developing using good tooling makes you work so much faster it's almost unbelievable.<br /><br />As I'm not an absolute guru with Webpack yet I prefer to use some other tooling, such as Gulp, to copy distribution files around. No doubt there are ways to manage just with Webpack, though, but right tools for right tasks and all that.<br /><br /><h3>The Future</h3>It is difficult to say where build tools might be moving. Perhaps yet another tool comes out and kicks Gulp in shins in turn? Too early to say. Webpack seems to solve the biggest issue for me and no doubt will become more popular as people discover it.<br /><br />Hot loading might become more than just a development goodie. At some point people will start doing hot loading in production and people will receive updates to JavaScript as they use the app without having to reload. No doubt that opens new cans of worms but in theory that sounds very fun!<br /><br /><h2>On Libraries and Frameworks</h2>On library/framework side the route has been from jQuery to Angular and finally React and friends. You could say jQuery is the PHP of JavaScript. It gets the job done and it's everywhere. Unfortunately it doesn't scale that well for larger scale development. If you need to spruce things up a bit on a static site it's a good pick but I wouldn't develop a JavaScript driven site using it if I can avoid that.<br /><br /><h3>Angular over jQuery</h3>Angular can be considered the next logical step over jQuery and you can even use them together. Sometimes you might want to avoid jQuery altogether. In fact often it's quite trivial to implement something in Angular that would require a yet another plugin in jQuery. I would say Angular is a very good fit for small projects and prototypes. I have my doubts about scaling.<br /><br />Given Angular is a framework it provides tons of functionality. The problems begin once you hit the boundaries. What if instead of loading each and every dependency the way Angular expects you want to start loading them dynamically per page? Let's just say you have just found a world of pain.<br /><br />This is a recurring theme during explorations to the Angular world. It works just fine until you hit some sharp edge and hurt yourself. Particularly directives hide a lot of complexity and it's easy to get them wrong. Performance-wise watchers can bite you and you will need to be very careful with them. It may be better to avoid them altogether and consider some alternative approaches.<br /><br />In fact people are experimenting with ways to simplify Angular development by borrowing ideas from the world of React. Two-way binding isn't your friend always. Some might even go as far and say it's an anti-pattern and I agree. If you can get something done with one-way binding, prefer that to two-way. It's just less headache for everyone.<br /><br /><h3>React.js over Angular</h3>The lack of two-way binding without helpers is one of the strong points of React. Given the flow goes to one direction, it is easy to reason about. As vanilla React deals with just the view portion of an application, you will eventually run into questions like how to deal with models, how should I share data between my components and so on.<br /><br />To make React shine, you will need to complement with a couple of libraries. I've stuck with react-router, axios (http client) and Reflux. In a future stack I might replace axios with a Swagger client that will generate the frontend API for me automatically. I'll get back to Swagger in a bit.<br /><br /><h3>Flux Architecture and Reflux</h3><a href=\"http://facebook.github.io/flux/docs/overview.html\">The Flux architecture</a>&nbsp;starts where vanilla React stops. In short its implementations and derivatives allow you to scale up from mere components. I have found <a href=\"https://github.com/spoike/refluxjs\">Reflux</a> a particularly light and smart implementation. It answers to the problems I highlighted very effectively. The idea is quite simple. Your components may trigger Actions. Actions in turn modify Stores in some way. The state of stores gets propagated to your components and the cycle is complete.<br /><br />Let's say we're modeling selection. I would define a SelectionAction and a SelectionStore. SelectionAction would contain actions select/deselect (accepts item to select/deselect). SelectionStore would maintain the state and on change let components know it changed. In vanilla React the state would be within components themselves. Here we have effectively extracted it out.<br /><br />By default we are dealing with Singletons so to avoid sharing state you would have to create separate instances but this is more of a special case. Another thing to keep in mind is that if you want to deal with asynchronous operations (say backend query), you should implement these in a particular way.<br /><br />Reflux provides a preEmit hook for this purpose. In case we implement a basic operation like fetch to initialize our Store, we would define three actions: fetch, fetchComplete, fetchError. fetchComplete and fetchError would then get triggered within the preEmit hook of fetch depending on the result. This in turn would cause our Store to either populate itself or deal with the error somehow.<br /><br />Error in turn could be passed to some other place, say ErrorStore. You could then listen to that and show the errors to the user, log them and so on. The approach has definite power in it.<br /><br />Of course you would have to play around with React and Reflux to appreciate the approach. Initially it might feel that you are writing a lot of code for nothing but that's not the point. The goal here is not to minimize the amount of code written but rather to make it easy to follow and reason about. This is something that can get obscured in the Angular and jQuery world unless you are careful.<br /><br /><h3>The Future</h3>It feels like React and Reflux are steps towards a better future. So far I haven't had to worry about performance when dealing with React. There have been gotchas of course and the way you need to think in is quite different than what you might have gotten used to. The approach forces you to keep your entities small and pushes towards components. The cognitive load for creating new components is lower than in Angular as there are less concepts to worry about.<br /><br />One of the main benefits of React is that it allows you to develop isomorphic JavaScript. Initial attempts have been made to allow Reflux support isomorphism as well. Instead of throwing a bit of HTML and JS to the client and expecting the client to construct the UI using JavaScript, in isomorphic approach we let the backend render HTML and perform initial queries needed. The frontend will then continue from this.<br /><br />It's back to the same old but this time we are better prepared and gain benefits from the both world. Performance is better and SEO is improved. In a world where latency and poor SEO means lost sales and poorer visibility, what is there not to like?<br /><br />If you want to take a peek at post-React world, you should study <a href=\"https://github.com/staltz/cycle\">Cycle</a>. There is still room for improvement and perhaps React was just a start. It would not surprise me a lot if it started feeling obsolete within a year or so.<br /><br /><h2>On Backend</h2>As frontend development has become more prominent during the past few years, the purpose of backend has changed. Now it's more about providing a sane API for frontend. RESTful patterns, HATEOAS and whatnot have appeared. You still have to deal with some basic concerns here such as authentication, authorization, business logic, validation and databases. In addition it would be awesome if there was decent documentation available.<br /><br /><h3>Swagger - Definition for Your API</h3>Lately I have been benchmarking <a href=\"http://swagger.io/\">Swagger</a>. It is a definition that builds on top of <a href=\"http://json-schema.org/\">JSON Schema</a>. In short Swagger can be used to describe your API. Various tools can be developed on top of this description. For instance you get interactive API documentation and frontend API client for free.<br /><br />Depending on the tooling you choose there is of course actual work to do. You will still need to deal with plenty of concerns but using a definition such as Swagger has potential to simplify work. Using a tool like this avoids the pain of having to maintain documentation that is separate from your API. You could of course generate one based on an existing API but that's still extra work that can be avoided.<br /><br />Furthermore the approach has potential to simplify validation a lot. Given each data model is described in JSON Schema, you can validate against the same schema in both frontend and backend. If the schema changes, the code doesn't have to change necessarily. In ideal world migrations could be generated based on schema changes (JSON Diff?) and propagated to database automatically. In simple cases even databases could be generated without having to maintain duplicate definitions.<br /><br /><h3>The Future</h3><div>It would not surprise me a lot if usage of definitions like Swagger became more common. Especially when you are working alone or in a small team, you will want to avoid waste. Tools like this have a great potential to do that and allow you to be more agile and responsive towards changes.</div><div><br /></div><div>From frontend point of view having an API definition simplifies things as it means you don't need to maintain a separate API client. You just generate one based on the definition. Furthermore the definition gives you something to fuzz with. This in turn can be used to improve API quality and security.</div><div><br /></div><h2>Conclusion</h2><div>Web development moves forward fast. It doesn't take long for new technologies to appear and old ones to stagnate. In a couple of short years we've gone through a couple of build tools and there is no end in sight. I do wonder what on earth could replace Webpack and how?</div><div><br /></div><div>Just when it looked like Angular had \"won\", backwards incompatibility of Angular 2.0 was announced. I have a feeling that might have stolen their thunder especially given the release date is still about a year away. In the meanwhile library based approaches will have time to evolve. I would bet on React and friends.</div><div><br /></div><div>On the backend side approaches like Swagger seem very promising. They take away some complexity while providing a lot if you have patience and time to write out a formal definition for your API. You will have to do that eventually so why not to start with it? This doesn't answer to the problem of API evolution but it's a starting point and much better than nothing!</div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1420566660000,"created_by":1,"updated_at":1420566688247,"updated_by":1,"published_at":1420566660000,"published_by":1},{"id":5,"title":"HTML5 Canvas Gradients - Animating Gradients","slug":"html5_canvas_gradients_animating_gradients","markdown":"In my previous post I showed you . That got me thinking. Wouldn&apos;t it be cool to animate this sort of thing? Apparently yes. \n\n## Demo\nSee demo below. Put some [Quincy Jones](https://www.youtube.com/watch?v=T5ALPzS0QfQ&spfreload=10) \n<script src=\"http://static.jsbin.com/js/embed.js\"></script> \n\n## Code Example\nHere&apos;s the full code (not visible in RSS): \n\n<script src=\"https://gist.github.com/bebraw/9aa7dac1e34be637d433.js\"></script>[JS Bin](http://jsbin.com/dubiqe/3/embed?js,output)","html":"In my previous post I showed you <a href=\"http://www.nixtu.info/2014/12/html5-canvas-gradients-lattice-gradient.html\">how to generate something I called lattice gradient</a>. That got me thinking. Wouldn't it be cool to animate this sort of thing? Apparently yes.<br /><br /><h2>Demo</h2><div>See demo below. Put some <a href=\"https://www.youtube.com/watch?v=T5ALPzS0QfQ&amp;spfreload=10\">Quincy Jones</a> as background music and tweak the values of the script for extra hilarity.</div><div><br /></div><a class=\"jsbin-embed\" href=\"http://jsbin.com/dubiqe/3/embed?js,output\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script><br /><br /><h2>Code Example</h2><div>Here's the full code (not visible in RSS):<br /><br /></div><script src=\"https://gist.github.com/bebraw/9aa7dac1e34be637d433.js\"></script> I am quite certain the code can be optimized a lot. Now it does plenty of ineffective things. Some lookups could be memoized or even precalculated and so on.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1419785820001,"created_by":1,"updated_at":1419785853713,"updated_by":1,"published_at":1419785820001,"published_by":1},{"id":6,"title":"HTML5 Canvas Gradients - Lattice Gradient","slug":"html5_canvas_gradients_lattice_gradient","markdown":"Inspired by I started thinking would it be possible to generalize the approach without too much effort. As a result I tweaked the algorithm little and made it accept a matrix as an input. \n\nI guess a visualization like this could be potentially useful for something like heatmaps if you bump up the resolution a lot. No idea of the performance, though. \n\n## Demo\nEnjoy(?) the demo below. I think you could animate it with a little effort and makes your own x-mas lights or something. \n<script src=\"http://static.jsbin.com/js/embed.js\"></script> \n\n## Code Example\nHere&apos;s the full code (not visible in RSS): \n[JS Bin](http://jsbin.com/bimeja/1/embed?js,output)","html":"Inspired by <a href=\"http://www.nixtu.info/2014/12/html5-canvas-gradients-rectangle.html\">my previous post about creating a rectangle gradient using HTML5 Canvas</a> I started thinking would it be possible to generalize the approach without too much effort. As a result I tweaked the algorithm little and made it accept a matrix as an input.<br /><br />I guess a visualization like this could be potentially useful for something like heatmaps if you bump up the resolution a lot. No idea of the performance, though.<br /><br /><h2>Demo</h2><div>Enjoy(?) the demo below. I think you could animate it with a little effort and makes your own x-mas lights or something.</div><div><br /></div><a class=\"jsbin-embed\" href=\"http://jsbin.com/bimeja/1/embed?js,output\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script><br /><div><br /></div><div><br /><h2>Code Example</h2></div><div>Here's the full code (not visible in RSS):</div><div><br /></div><script src=\"https://gist.github.com/bebraw/c06b51e94e04850bd397.js\"></script>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1419409260000,"created_by":1,"updated_at":1419409301464,"updated_by":1,"published_at":1419409260000,"published_by":1},{"id":7,"title":"HTML5 Canvas Gradients - Rectangle Gradient with Arbitrary Corners","slug":"html5_canvas_gradients_rectangle_gradient_with_arbitrary_corners","markdown":"I recently found a question on on Stack Overflow. The problem is simple but there is no direct way to achieve this through the Canvas API. \n\nFortunately writing a generic solution is not that hard. I already did something like this in case of . This is just a more specific problem. I&apos;ve outlined the solution below. \n\n## Demo\nHere is a simple demo for you to play with: \n\n<script src=\"http://static.jsbin.com/js/embed.js\"></script> \n\n## Code Example\n[JS Bin](http://jsbin.com/boyemuxowa/1/embed?js,output)","html":"I recently found a question on <a href=\"https://stackoverflow.com/questions/27581007/html5-canvas-gradient-in-4-corners/27584354\">how to generate a rectangle gradient with arbitrary corners</a> on Stack Overflow. The problem is simple but there is no direct way to achieve this through the Canvas API.<br /><br />Fortunately writing a generic solution is not that hard. I already did something like this in case of <a href=\"http://www.nixtu.info/2010/08/html5-canvas-gradients-triangle.html\">a triangle gradient</a>. This is just a more specific problem. I've outlined the solution below.<br /><br /><h2>Demo</h2>Here is a simple demo for you to play with:<br /><br /><a class=\"jsbin-embed\" href=\"http://jsbin.com/boyemuxowa/1/embed?js,output\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script><br /><br /><h2>Code Example</h2><div>And here is a full code example:<br /><br /><script src=\"https://gist.github.com/bebraw/24f2324ad2df0e57db68.js\"></script> We just render a linear gradient per each line while interpolating the colors. Simple as that.<br /><br />It would be possible to generalize this further to support more color stops etc. but I will leave that as an exercise for the reader.</div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1419328140000,"created_by":1,"updated_at":1419328299558,"updated_by":1,"published_at":1419328140000,"published_by":1},{"id":8,"title":"Linkdump 23 - Business, Personal Development, Software Development...","slug":"linkdump_23_business_personal_development_software_development","markdown":"Time to dump. Previous one was at so there is a lot to cover! \n\n## Business\n\n* [Google has outgrown its 14-year old mission statement, says Larry Page](http://www.theguardian.com/technology/2014/nov/03/larry-page-google-dont-be-evil-sergey-brin)\n* [Hiring should be the last thing to do when overwhelmed with work](http://www.samihonkonen.com/hiring-should-be-the-last-thing-to-do-when-overwhelmed-with-work/)\n* [Google Launches Managed Service For Running Docker-Based Applications On Its Cloud Platform](http://techcrunch.com/2014/11/04/google-launches-managed-service-for-running-docker-based-applications-on-its-cloud-platform/)\n* [21 Ways to Minimize Employee Retention](http://rustyrazorblade.com/2014/09/21-ways-to-minimize-employee-retention/)\n* [Eight Years of College Lets Finns Hide From Labor Market](http://www.bloomberg.com/news/2014-08-20/eight-years-of-college-lets-finns-hide-from-labor-market.html) \n\n### Startups\n\n* [Startups can now buy insurance against threat of patent trolls](http://arstechnica.com/tech-policy/2014/11/startups-can-now-buy-insurance-against-threat-of-patent-trolls/)\n* [Templates Suck, Here&apos;s Our Lean Startup Experiment Template by @TriKro](http://grasshopperherder.com/templates-suck-heres-the-lean-startup-experiment-herder-template/) \n\n## Personal Development\n\n* [Learn Difficult Concepts with the ADEPT Method](http://betterexplained.com/articles/adept-method/)\n* [Swiss Cheese Model of Stress Resistance](https://hackedman.silvrback.com/swiss-cheese-model-of-stress-resistance)\n* [Mining Bitcoin with pencil and paper: 0.67 hashes per day](http://www.righto.com/2014/09/mining-bitcoin-with-pencil-and-paper.html)\n* [Talking to Humans, by Giff Constable](http://www.talkingtohumans.com/)\n* [Curiosity Is as Important as Intelligence](https://hbr.org/2014/08/curiosity-is-as-important-as-intelligence/)\n* [Markov Chains](http://setosa.io/blog/2014/07/26/markov-chains/) \n\n## Computer Graphics\n\n* [Kalman Filter for Dummies](http://bilgin.esme.org/BitsBytes/KalmanFilterforDummies.aspx)\n* [Stuff that every programmer should know: Data Visualization](http://c0de517e.blogspot.de/2014/06/stuff-that-every-programmer-should-know.html)\n* [South Park in Oculus](http://southparkoculus.toolofnadrive.com/)\n* [The B&#xE9;zier Game](http://bezier.method.ac/) \n\n## Software\n\n* [Cathode](http://www.secretgeometry.com/apps/cathode/)\n* [Swordfish90/cool-retro-term](https://github.com/Swordfish90/cool-retro-term)\n* [20 Years of Impulse Tracker, Part 3](http://roartindon.blogspot.fi/2014/10/20-years-of-impulse-tracker-part-3.html)\n* [mitro-co/mitro](https://github.com/mitro-co/mitro)\n* [Xiki: The Command Revolution by Craig Muth](https://www.kickstarter.com/projects/xiki/xiki-the-command-revolution) \n\n## Software Development\n\n* [Microsoft open sources .NET, takes it to Linux and OS X](http://arstechnica.com/information-technology/2014/11/microsoft-open-sources-net-takes-it-to-linux-and-os-x/)\n* [The Sixth Stage of Grief is Retro-Computing](https://medium.com/message/networks-without-networks-7644933a3100)\n* [Programming Sucks](http://www.stilldrinking.org/programming-sucks)\n* [A coder&#x2019;s resume](http://www.commitstrip.com/en/2014/10/09/a-coders-resume/)\n* [Erik Meijer - Software is eating the world](http://reaktor.fi/blog/erik-meijer-software-eating-world/)\n* [The Codist: Lessons From A Lifetime Of Being A Programmer](http://thecodist.com/article/lessons_from_a_lifetime_of_being_a_programmer)\n* [Why hourly time tracking doesn&apos;t work for software](http://bocoup.com/weblog/developer-weeks/) \n\n### Big Data\n\n* [Germany&apos;s Secret World Cup Weapon: Big Data](http://www.cioinsight.com/it-news-trends/germanys-secret-world-cup-weapon-big-data.html) \n\n### Languages\n\n* [Clojure Distilled](http://yogthos.github.io/ClojureDistilled.html)\n* [Why your first FizzBuzz implementation may not work: an exploration into some initially surprising but great parts of Rust (though you still might not like them)](http://chrismorgan.info/blog/rust-fizzbuzz.html)\n* [Are Haskell engineers second-rate?](http://michaelochurch.wordpress.com/2014/10/07/are-haskell-engineers-second-rate/)\n* [(lisp (flavored (erlang)))](http://lfe.io/) \n\n### Productivity\n\n* [Stack Overflow in 4096 bytes](http://danlec.com/blog/stackoverflow-in-4096-bytes)\n* [For the Love of Goodness, Do Not Disturb](http://www.cafe.com/r/5df818f9-2fda-49a5-a54a-1761e083f44e/1/do-not-disturb)\n* [Let&#x2019;s Get Serious About Readability](https://medium.com/bloc-posts/lets-get-serious-about-readability-4e4ce6a9b6c2)\n* [Short logic (Reddit&#x2019;s crappy ultimatum to remote workers and offices)](http://shortlogic.tumblr.com/post/99014759324/reddits-crappy-ultimatum)\n* [xkcd: Tasks](https://xkcd.com/1425/)\n* [How We Sent a Man to the Moon Without E-mail and Why it Matters Today](http://calnewport.com/blog/2014/10/04/how-we-sent-a-man-to-the-moon-without-e-mail-and-why-it-matters-today/)\n* [Predictive Models of Development Teams and the Systems They Build](http://sixty-north.com/blog/predictive-models-of-development-teams-and-the-systems-they-build)\n* [Why do dynamic languages make it difficult to maintain large codebases?](http://arstechnica.com/information-technology/2014/06/why-do-dynamic-languages-make-it-difficult-to-maintain-large-codebases/)\n* [sdegutis/mjolnir](https://github.com/sdegutis/mjolnir) \n\n### Agile\n\n* [Agile doesn&apos;t have a brain](http://www.jeffgothelf.com/blog/agile-doesnt-have-a-brain/)\n* [Waterfall 2.0](http://www.slideshare.net/allankellynet/no-prokects-beyond-projects-refreshed-version) \n\n### Editors\n\n* [Vim After 11 Years](http://statico.github.io/vim.html)\n* [Bye Zen Coding, Hello Emmet!](https://www.youtube.com/watch?v=sxW-V24MTXI&utm_content=buffer9199d&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer)\n* [The Best Plugins for Sublime Text](http://ipestov.com/the-best-plugins-for-sublime-text/)\n* [Emacs 24.4 released](https://lists.gnu.org/archive/html/emacs-devel/2014-10/msg00713.html)\n* [BoundInCode/AutoFileName](https://github.com/BoundInCode/AutoFileName) \n\n## Web Development\n\n* [7 Principles of Rich Web Applications](http://rauchg.com/2014/7-principles-of-rich-web-applications/)\n* [curl | sh](http://curlpipesh.tumblr.com/)\n* [Lapple/ErrorBoard](https://github.com/Lapple/ErrorBoard)\n* [Tesla Model S JSON API&#x2014;by apiary.io](http://docs.timdorr.apiary.io/)\n* [You might not need a websocket](http://blog.fanout.io/2014/06/24/you-might-not-need-a-websocket/)\n* [JSONX](http://www-01.ibm.com/support/knowledgecenter/SS9H2Y_6.0.0/com.ibm.dp.xm.doc/json_jsonx.html)\n* [How we build microservices at Karma](https://blog.yourkarma.com/building-microservices-at-karma)\n* [Passwords are Obsolete](https://medium.com/@ninjudd/passwords-are-obsolete-9ed56d483eb) \n\n### JavaScript\n\n* [10 things some guy learned from reading (and writing) the PouchDB source](http://pouchdb.com/2014/10/26/10-things-i-learned-from-reading-and-writing-the-pouchdb-source.html)\n* [DukeScript](http://dukescript.com/)\n* [JavaScript for OS X Automation by Example -Telerik Developer Network](http://developer.telerik.com/featured/javascript-os-x-automation-example/) \n\n### CSS\n\n* [Centering in CSS: A Complete Guide](http://css-tricks.com/centering-css-complete-guide/)\n* [The Web Animations You&apos;ve Always Wanted](http://alexjray.com/post/the_web_animations_you_have_always_wanted/)\n* [Stop the cascade](http://markdotto.com/2012/03/02/stop-the-cascade/)\n* [Make full screen sections with 1 line of CSS](https://medium.com/@ckor/make-full-screen-sections-with-1-line-of-css-b82227c75cbd)\n* [Understanding CSS Specificity](https://engineering.zillow.com/understanding-css-specificity/)\n* [Twenty Years of CSS - Thank Hakon!](https://dev.opera.com/articles/css-twenty-years-hakon/)\n* [Refills](http://refills.bourbon.io/)\n* [Introducing AM](http://glenmaddern.com/articles/introducing-am-css) \n\n### React\n\n* [Swarm.js + React](http://swarmjs.github.io/articles/todomvc/)\n* [D3 and React](http://10consulting.com/2014/02/19/d3-plus-reactjs-for-charting/)\n* [Moving Atom To React](http://blog.atom.io/2014/07/02/moving-atom-to-react.html)\n* [Virtual DOM in Elm](http://elm-lang.org/blog/Blazing-Fast-Html.elm)\n* [A Sortable List Component in React utilizing the HTML5 Drag & Drop API](http://webcloud.se/sortable-list-component-react-js/)\n* [Deconstructing ReactJS&apos;s Flux](http://spoike.ghost.io/deconstructing-reactjss-flux/)\n* [react-hot-loader](http://gaearon.github.io/react-hot-loader/) \n\n### Angular\n\n* [From AngularJS to React: The Isomorphic Way](http://blog.risingstack.com/from-angularjs-to-react-the-isomorphic-way/)\n* [TDD with AngularJS](https://speakerdeck.com/miketierney/tdd-with-angularjs)\n* [&#x201C;Screw You, Angular&#x201D;](https://medium.com/@jeffwhelpley/screw-you-angular-62b3889fd678)\n* [Think Twice (or Thrice) Before Using Angular](http://leoasis.github.io/posts/2014/10/28/think-twice-or-thrice-before-using-angular/) \n\n### Development Tools\n\n* [petehunt/webpack-howto](https://github.com/petehunt/webpack-howto)\n* [Lets Tincr: Bi-directional Editing And Saving With The Chrome DevTools](http://setapp.me/articles/lets-tincr-bi-directional-editing-and-saving-with-the-chrome-devtools)\n* [12 Extensions & Apps that Fill the Gaps in Chrome DevTools -Telerik Developer Network](http://developer.telerik.com/featured/12-extensions-apps-fill-gaps-devtools/)\n* [Dimensions Browser Extension](http://felixniklas.com/dimensions/) \n\n## Design\n\n* [The Science of Happy Design](http://www.uxbooth.com/articles/science-happy-design/)\n* [Designer&apos;s guide to DPI](https://liber.io/v/liberioEpub_5434c764cc295)\n* [How Apple Uses Picasso To Teach Employees About Product Design](http://www.fastcodesign.com/3034240/how-apple-uses-picasso-to-teach-employees-about-product-design)\n* [Poor UI Design Can Kill &#x2013; Air Inter Flight 148, a harsh lesson learned](http://blog.martindoms.com/2011/01/24/poor-ui-design-can-kill/)\n* [B&#xE9;zier Clock](http://jackf.net/bezier-clock/) \n\n## Games\n\n* [Ultimate Tic-Tac-Toe](http://mathwithbaddrawings.com/2013/06/16/ultimate-tic-tac-toe/)\n* [The SQL of The Game of Life](https://www.simple-talk.com/sql/sql-training/the-sql-of-the-game-of-life/)\n* [Hatetris](http://qntm.org/files/hatetris/hatetris.html)\n* [Driftmoon sales figures and wisdom](http://www.instantkingdom.com/2014/08/salesfigures/) \n\n## Hardware\n\n* [iDiots on Vimeo](http://vimeo.com/79695097)\n* [King of click: the story of the greatest keyboard ever made](http://www.theverge.com/2014/10/7/6882427/king-of-keys)\n* [Sonic Pi](http://sonic-pi.net/)\n* [Apple watch](http://www.instructables.com/id/apple-watch/) \n\n## Art\n[June](http://www.nixtu.info/2014/06/linkdump-22-business-software.html)","html":"Time to dump. Previous one was at <a href=\"http://www.nixtu.info/2014/06/linkdump-22-business-software.html\">June</a> so there is a lot to cover!<br /><br /><h2 id=\"business\">Business</h2><ul><li><a href=\"http://www.theguardian.com/technology/2014/nov/03/larry-page-google-dont-be-evil-sergey-brin\">Google has outgrown its 14-year old mission statement, says Larry Page</a></li><li><a href=\"http://www.samihonkonen.com/hiring-should-be-the-last-thing-to-do-when-overwhelmed-with-work/\">Hiring should be the last thing to do when overwhelmed with work</a></li><li><a href=\"http://techcrunch.com/2014/11/04/google-launches-managed-service-for-running-docker-based-applications-on-its-cloud-platform/\">Google Launches Managed Service For Running Docker-Based Applications On Its Cloud Platform</a></li><li><a href=\"http://rustyrazorblade.com/2014/09/21-ways-to-minimize-employee-retention/\">21 Ways to Minimize Employee Retention</a></li><li><a href=\"http://www.bloomberg.com/news/2014-08-20/eight-years-of-college-lets-finns-hide-from-labor-market.html\">Eight Years of College Lets Finns Hide From Labor Market</a></li></ul><div><br /></div><h3 id=\"startups\">Startups</h3><ul><li><a href=\"http://arstechnica.com/tech-policy/2014/11/startups-can-now-buy-insurance-against-threat-of-patent-trolls/\">Startups can now buy insurance against threat of patent trolls</a></li><li><a href=\"http://grasshopperherder.com/templates-suck-heres-the-lean-startup-experiment-herder-template/\">Templates Suck, Here's Our Lean Startup Experiment Template by @TriKro</a></li></ul><div><br /></div><h2 id=\"personal-development\">Personal Development</h2><ul><li><a href=\"http://betterexplained.com/articles/adept-method/\">Learn Difficult Concepts with the ADEPT Method</a></li><li><a href=\"https://hackedman.silvrback.com/swiss-cheese-model-of-stress-resistance\">Swiss Cheese Model of Stress Resistance</a></li><li><a href=\"http://www.righto.com/2014/09/mining-bitcoin-with-pencil-and-paper.html\">Mining Bitcoin with pencil and paper: 0.67 hashes per day</a> - Handy skill to have if money is really tight.</li><li><a href=\"http://www.talkingtohumans.com/\">Talking to Humans, by Giff Constable</a></li><li><a href=\"https://hbr.org/2014/08/curiosity-is-as-important-as-intelligence/\">Curiosity Is as Important as Intelligence</a></li><li><a href=\"http://setosa.io/blog/2014/07/26/markov-chains/\">Markov Chains</a> - A visual explanation</li></ul><div><br /></div><h2 id=\"computer-graphics\">Computer Graphics</h2><ul><li><a href=\"http://bilgin.esme.org/BitsBytes/KalmanFilterforDummies.aspx\">Kalman Filter for Dummies</a></li><li><a href=\"http://c0de517e.blogspot.de/2014/06/stuff-that-every-programmer-should-know.html\">Stuff that every programmer should know: Data Visualization</a></li><li><a href=\"http://southparkoculus.toolofnadrive.com/\">South Park in Oculus</a></li><li><a href=\"http://bezier.method.ac/\">The Bézier Game</a></li></ul><div><br /></div><h2 id=\"software\">Software</h2><ul><li><a href=\"http://www.secretgeometry.com/apps/cathode/\">Cathode</a> - Retro terminal</li><li><a href=\"https://github.com/Swordfish90/cool-retro-term\">Swordfish90/cool-retro-term</a></li><li><a href=\"http://roartindon.blogspot.fi/2014/10/20-years-of-impulse-tracker-part-3.html\">20 Years of Impulse Tracker, Part 3</a></li><li><a href=\"https://github.com/mitro-co/mitro\">mitro-co/mitro</a> - Open source password manager</li><li><a href=\"https://www.kickstarter.com/projects/xiki/xiki-the-command-revolution\">Xiki: The Command Revolution by Craig Muth</a></li></ul><div><br /></div><h2 id=\"software-development\">Software Development</h2><ul><li><a href=\"http://arstechnica.com/information-technology/2014/11/microsoft-open-sources-net-takes-it-to-linux-and-os-x/\">Microsoft open sources .NET, takes it to Linux and OS X</a></li><li><a href=\"https://medium.com/message/networks-without-networks-7644933a3100\">The Sixth Stage of Grief is Retro-Computing</a></li><li><a href=\"http://www.stilldrinking.org/programming-sucks\">Programming Sucks</a></li><li><a href=\"http://www.commitstrip.com/en/2014/10/09/a-coders-resume/\">A coder’s resume</a></li><li><a href=\"http://reaktor.fi/blog/erik-meijer-software-eating-world/\">Erik Meijer - Software is eating the world</a></li><li><a href=\"http://thecodist.com/article/lessons_from_a_lifetime_of_being_a_programmer\">The Codist: Lessons From A Lifetime Of Being A Programmer</a></li><li><a href=\"http://bocoup.com/weblog/developer-weeks/\">Why hourly time tracking doesn't work for software</a></li></ul><div><br /></div><h3 id=\"big-data\">Big Data</h3><ul><li><a href=\"http://www.cioinsight.com/it-news-trends/germanys-secret-world-cup-weapon-big-data.html\">Germany's Secret World Cup Weapon: Big Data</a></li></ul><div><br /></div><h3 id=\"languages\">Languages</h3><ul><li><a href=\"http://yogthos.github.io/ClojureDistilled.html\">Clojure Distilled</a></li><li><a href=\"http://chrismorgan.info/blog/rust-fizzbuzz.html\">Why your first FizzBuzz implementation may not work: an exploration into some initially surprising but great parts of Rust (though you still might not like them)</a></li><li><a href=\"http://michaelochurch.wordpress.com/2014/10/07/are-haskell-engineers-second-rate/\">Are Haskell engineers second-rate?</a></li><li><a href=\"http://lfe.io/\">(lisp (flavored (erlang)))</a></li></ul><div><br /></div><h3 id=\"productivity\">Productivity</h3><ul><li><a href=\"http://danlec.com/blog/stackoverflow-in-4096-bytes\">Stack Overflow in 4096 bytes</a></li><li><a href=\"http://www.cafe.com/r/5df818f9-2fda-49a5-a54a-1761e083f44e/1/do-not-disturb\">For the Love of Goodness, Do Not Disturb</a></li><li><a href=\"https://medium.com/bloc-posts/lets-get-serious-about-readability-4e4ce6a9b6c2\">Let’s Get Serious About Readability</a></li><li><a href=\"http://shortlogic.tumblr.com/post/99014759324/reddits-crappy-ultimatum\">Short logic (Reddit’s crappy ultimatum to remote workers and offices)</a></li><li><a href=\"https://xkcd.com/1425/\">xkcd: Tasks</a></li><li><a href=\"http://calnewport.com/blog/2014/10/04/how-we-sent-a-man-to-the-moon-without-e-mail-and-why-it-matters-today/\">How We Sent a Man to the Moon Without E-mail and Why it Matters Today</a></li><li><a href=\"http://sixty-north.com/blog/predictive-models-of-development-teams-and-the-systems-they-build\">Predictive Models of Development Teams and the Systems They Build</a></li><li><a href=\"http://arstechnica.com/information-technology/2014/06/why-do-dynamic-languages-make-it-difficult-to-maintain-large-codebases/\">Why do dynamic languages make it difficult to maintain large codebases?</a></li><li><a href=\"https://github.com/sdegutis/mjolnir\">sdegutis/mjolnir</a> - Light-weight automation for OS X using Lua</li></ul><div><br /></div><h3 id=\"agile\">Agile</h3><ul><li><a href=\"http://www.jeffgothelf.com/blog/agile-doesnt-have-a-brain/\">Agile doesn't have a brain</a></li><li><a href=\"http://www.slideshare.net/allankellynet/no-prokects-beyond-projects-refreshed-version\">Waterfall 2.0</a></li></ul><div><br /></div><h3 id=\"editors\">Editors</h3><ul><li><a href=\"http://statico.github.io/vim.html\">Vim After 11 Years</a></li><li><a href=\"https://www.youtube.com/watch?v=sxW-V24MTXI&amp;utm_content=buffer9199d&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer\">Bye Zen Coding, Hello Emmet!</a></li><li><a href=\"http://ipestov.com/the-best-plugins-for-sublime-text/\">The Best Plugins for Sublime Text</a></li><li><a href=\"https://lists.gnu.org/archive/html/emacs-devel/2014-10/msg00713.html\">Emacs 24.4 released</a></li><li><a href=\"https://github.com/BoundInCode/AutoFileName\">BoundInCode/AutoFileName</a></li></ul><div><br /></div><h2 id=\"web-development\">Web Development</h2><ul><li><a href=\"http://rauchg.com/2014/7-principles-of-rich-web-applications/\">7 Principles of Rich Web Applications</a></li><li><a href=\"http://curlpipesh.tumblr.com/\">curl | sh</a></li><li><a href=\"https://github.com/Lapple/ErrorBoard\">Lapple/ErrorBoard</a></li><li><a href=\"http://docs.timdorr.apiary.io/\">Tesla Model S JSON API—by apiary.io</a></li><li><a href=\"http://blog.fanout.io/2014/06/24/you-might-not-need-a-websocket/\">You might not need a websocket</a></li><li><a href=\"http://www-01.ibm.com/support/knowledgecenter/SS9H2Y_6.0.0/com.ibm.dp.xm.doc/json_jsonx.html\">JSONX</a> - You don't want to know.</li><li><a href=\"https://blog.yourkarma.com/building-microservices-at-karma\">How we build microservices at Karma</a></li><li><a href=\"https://medium.com/@ninjudd/passwords-are-obsolete-9ed56d483eb\">Passwords are Obsolete</a></li></ul><div><br /></div><h3 id=\"javascript\">JavaScript</h3><ul><li><a href=\"http://pouchdb.com/2014/10/26/10-things-i-learned-from-reading-and-writing-the-pouchdb-source.html\">10 things some guy learned from reading (and writing) the PouchDB source</a></li><li><a href=\"http://dukescript.com/\">DukeScript</a></li><li><a href=\"http://developer.telerik.com/featured/javascript-os-x-automation-example/\">JavaScript for OS X Automation by Example -Telerik Developer Network</a></li></ul><div><br /></div><h3 id=\"css\">CSS</h3><ul><li><a href=\"http://css-tricks.com/centering-css-complete-guide/\">Centering in CSS: A Complete Guide</a></li><li><a href=\"http://alexjray.com/post/the_web_animations_you_have_always_wanted/\">The Web Animations You've Always Wanted</a></li><li><a href=\"http://markdotto.com/2012/03/02/stop-the-cascade/\">Stop the cascade</a></li><li><a href=\"https://medium.com/@ckor/make-full-screen-sections-with-1-line-of-css-b82227c75cbd\">Make full screen sections with 1 line of CSS</a></li><li><a href=\"https://engineering.zillow.com/understanding-css-specificity/\">Understanding CSS Specificity</a></li><li><a href=\"https://dev.opera.com/articles/css-twenty-years-hakon/\">Twenty Years of CSS - Thank Hakon!</a></li><li><a href=\"http://refills.bourbon.io/\">Refills</a></li><li><a href=\"http://glenmaddern.com/articles/introducing-am-css\">Introducing AM</a></li></ul><div><br /></div><h3 id=\"react\">React</h3><ul><li><a href=\"http://swarmjs.github.io/articles/todomvc/\">Swarm.js + React</a></li><li><a href=\"http://10consulting.com/2014/02/19/d3-plus-reactjs-for-charting/\">D3 and React</a></li><li><a href=\"http://blog.atom.io/2014/07/02/moving-atom-to-react.html\">Moving Atom To React</a></li><li><a href=\"http://elm-lang.org/blog/Blazing-Fast-Html.elm\">Virtual DOM in Elm</a></li><li><a href=\"http://webcloud.se/sortable-list-component-react-js/\">A Sortable List Component in React utilizing the HTML5 Drag &amp; Drop API</a></li><li><a href=\"http://spoike.ghost.io/deconstructing-reactjss-flux/\">Deconstructing ReactJS's Flux</a></li><li><a href=\"http://gaearon.github.io/react-hot-loader/\">react-hot-loader</a></li></ul><div><br /></div><h3 id=\"angular\">Angular</h3><ul><li><a href=\"http://blog.risingstack.com/from-angularjs-to-react-the-isomorphic-way/\">From AngularJS to React: The Isomorphic Way</a></li><li><a href=\"https://speakerdeck.com/miketierney/tdd-with-angularjs\">TDD with AngularJS</a></li><li><a href=\"https://medium.com/@jeffwhelpley/screw-you-angular-62b3889fd678\">“Screw You, Angular”</a></li><li><a href=\"http://leoasis.github.io/posts/2014/10/28/think-twice-or-thrice-before-using-angular/\">Think Twice (or Thrice) Before Using Angular</a></li></ul><div><br /></div><h3 id=\"development-tools\">Development Tools</h3><ul><li><a href=\"https://github.com/petehunt/webpack-howto\">petehunt/webpack-howto</a></li><li><a href=\"http://setapp.me/articles/lets-tincr-bi-directional-editing-and-saving-with-the-chrome-devtools\">Lets Tincr: Bi-directional Editing And Saving With The Chrome DevTools</a></li><li><a href=\"http://developer.telerik.com/featured/12-extensions-apps-fill-gaps-devtools/\">12 Extensions &amp; Apps that Fill the Gaps in Chrome DevTools -Telerik Developer Network</a></li><li><a href=\"http://felixniklas.com/dimensions/\">Dimensions Browser Extension</a></li></ul><div><br /></div><h2 id=\"design\">Design</h2><ul><li><a href=\"http://www.uxbooth.com/articles/science-happy-design/\">The Science of Happy Design</a></li><li><a href=\"https://liber.io/v/liberioEpub_5434c764cc295\">Designer's guide to DPI</a></li><li><a href=\"http://www.fastcodesign.com/3034240/how-apple-uses-picasso-to-teach-employees-about-product-design\">How Apple Uses Picasso To Teach Employees About Product Design</a></li><li><a href=\"http://blog.martindoms.com/2011/01/24/poor-ui-design-can-kill/\">Poor UI Design Can Kill – Air Inter Flight 148, a harsh lesson learned</a></li><li><a href=\"http://jackf.net/bezier-clock/\">Bézier Clock</a></li></ul><div><br /></div><h2 id=\"games\">Games</h2><ul><li><a href=\"http://mathwithbaddrawings.com/2013/06/16/ultimate-tic-tac-toe/\">Ultimate Tic-Tac-Toe</a></li><li><a href=\"https://www.simple-talk.com/sql/sql-training/the-sql-of-the-game-of-life/\">The SQL of The Game of Life</a></li><li><a href=\"http://qntm.org/files/hatetris/hatetris.html\">Hatetris</a></li><li><a href=\"http://www.instantkingdom.com/2014/08/salesfigures/\">Driftmoon sales figures and wisdom</a></li></ul><div><br /></div><h2 id=\"hardware\">Hardware</h2><ul><li><a href=\"http://vimeo.com/79695097\">iDiots on Vimeo</a></li><li><a href=\"http://www.theverge.com/2014/10/7/6882427/king-of-keys\">King of click: the story of the greatest keyboard ever made</a></li><li><a href=\"http://sonic-pi.net/\">Sonic Pi</a></li><li><a href=\"http://www.instructables.com/id/apple-watch/\">Apple watch</a></li></ul><div><br /></div><h2 id=\"art\">Art</h2><ul><li><a href=\"http://hackaday.com/2014/11/08/using-tetris-like-ms-paint/\">Using Tetris Like MS Paint</a></li><li><a href=\"http://buffalobillgates.tumblr.com/\">Buffalo Bill Gates</a></li><li><a href=\"http://www.openculture.com/2014/08/moebius-storyboards-concept-art-for-jodorowskys-dune.html\">Moebius' Storyboards &amp; Concept Art for Jodorowsky's Dune</a></li><li><a href=\"http://jeremykun.com/2014/09/29/hybrid-images/\">Making Hybrid Images</a></li></ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1416154200000,"created_by":1,"updated_at":1424931227439,"updated_by":1,"published_at":1416154200000,"published_by":1},{"id":9,"title":"Afterthoughts - Tampere Goes Agile '14","slug":"afterthoughts_tampere_goes_agile_14","markdown":"What would a year be without ? To paraphrase this years motto &quot;we&apos;re all in this together&quot;. This was visible in talks throughout the day. \n\nthe event was a bit smaller (~135 vs. ~ 235 people). Despite this the event had some very high quality content some of which I&apos;ll highlight next. Perhaps the most interesting thing about this year was the inclusion of multiple workshops in middle of the day. \n\nConsidering Tampere Goes Agile is a free event for participants the quality of it keeps surprising me year after year. Besides excellent selection of talks you get to meet a bunch of great people. \n\n## Woody Zuill - Mob Programming\nThe day started with a keynote by Woody Zuill. Initially I was a little skeptical. How could you possibly develop software in a mob? Apparently quite well! \n\n### Traditional Split\nTraditionally software development has relied on division of labor and expert work. The problem is that once you start to split work you will end up with all sorts of dependencies. This in turn can lead to development blocks and wasted time as you are forced to wait or just do something else while at it.&#xA0; \nMultitasking just makes the situation worse. You will end up jumping between tasks while waiting for answers. This in turn creates stress that definitely doesn&apos;t help. \n\n### Get Together?\nWhat if all the people that have the answers would be in the same room at the same time and developed the software together? You could invite domain specialists or the client even to participate in your sessions. Even though this might sound a little strange approach it alleviates those concerns I just highlighted. \nWhen you are working as a mob this allows you to focus all the energy on a single task at a time (automatic single piece flow!). If you end up blocked there is someone with the answer in the vicinity. It is like the concept of pair programming scaled to the team level. \n\n### Woody&apos;s Approach\nIn Woody&apos;s configuration there is a single driver (rotated every 15 mins or so). That person writes the code. The rest operate as navigators and guide the driver. The primary advantage of this seems to be that while the driver can think in code the rest can focus on thinking in human terms. They might also spot inefficiencies and help guide the driver towards better technical solutions that might not have been found otherwise. \nGiven there is so much expertise in the room at the same time this might allow the team to avoid entire categories of problems or eliminate some of the existing ones! Multiple perspectives seem to allow this and the approach helps to avoid some of the traditional sources of waste in software. \nThe approach isn&apos;t without its challenges. It could prove challenging for certain people as it literally brings your work out in the open. Working directly with other people isn&apos;t the way software is normally developed. For work like this to succeed you will need to remember to be kind, considerate and respect others even if they might be wrong or irk you in some way. \nBesides removing waste the approach allows information to be shared more effectively (reduced bus factor). As it encourages information sharing through collaboration people pick up new skills faster. This is something you simply don&apos;t get in a segregated environment prevalent in the industry. \n\n### Takeaways\nMob programming is something Woody and his peers discovered through introspection. It was not just something that came out of thin air. Rather they ended up developing software this way because it felt like the right and most effective thing to do. To quote Woody you should find your own way. That said, maybe mobbing works out for you but don&apos;t expect it to be a silver bullet. \nPer Jansson has written [an introduction to mob programming](http://mobprogramming.org/get-a-good-start-with-mob-programming/) \n\n## Making Work Flow - Lauri Hahne\nThe gist of Lauri&apos;s talk was in how do traditional approaches fail us. He sees software development as a systems and a learning problem. This is very opposite to the waterfall view. I agree with Lauri here. The system, context in which we develop software, puts heavy constraints on productivity. Unless you are developing something you have done before exactly, learning will need to happen. Both of these contribute heavily to project success even if you aren&apos;t aware of the issue. \n\n### The Traditional Model\nThe traditional development model is very static in sense that it builds on things like requirements management, HR and distribution of work for maximum utilization. The traditional model focuses heavily on aspects such as technology choices, finding proficient people and division of labor. Teams are formed per project, work is performed on individual level and all of that is managed by a project manager. \nIf you are building something you have developed before I have no doubt the traditional model couldn&apos;t work. What happens, though, when you need to work on something more complex? How do you know you are building the right thing in the first place? How do you measure the impact of your results? \nThe traditional development model has a lot to owe to Taylor and the industrial era. The theories expect that people are lazy by default and need to be managed for work to get done. Specialization is required to get most out of division of labor. What if some, or all, of the assumptions we&apos;ve built our development processes are wrong? \n\n### What Are Good Teams Like?\nWhat if people aren&apos;t lazy and actually want to get things done? What if good teams are larger than the sum of their parts? What if it is beneficial for people to have cross-competencies, not just specialities? \nAccording to Hahne [teams that finish early, accelerate faster](http://scrumlab.scruminc.com/articles.html/_/open/finish-early-accelerate-faster-r56) \nYou will likely have to discard some of the older ideas to get better. There are plenty of sources for new ones. Of these Hahne mentioned Toyota Production System (Kanban etc. come from here) and John Boyd&apos;s Blitzkrieg. He also suggested rethinking division of work. What if you operated per technological layer, screen or feature as a team. It&apos;s not a huge leap to mob programming from here. \nHahne values stable teams of teams formed per project. Stable teams operate more consistently, eliminate HR and allows them to operate more effectively as you minimize the effect of Tuckman cycle related to forming of teams. \nHahne highlighted swarming as it will allow each team to operate on a single task at a time (single piece flow). Rather than working on tons of smaller issues at once you actually focus on getting something ready. This eliminates a significant amount of waste and multitasking which in turn improves productivity. \n\n### Focus on Process Improvement\nHahne&apos;s focus on working on the process itself was prevalent. You should have a good idea of what is blocking team&apos;s performance and take steps towards eliminating it. Again, focus on teams seems to be the key here. \nIf software development has taught me anything, it&apos;s that errors pile up and accomplishments disappear. When things go south, people start feeling bad and the cycle gets even worse. If you rush things to make a deadline, you will pay for it later in forms of technical debt and reduced morale. What if you could do things better in the first place and avoid this? \n\n### Takeaways\nTraditional software development puts too much emphasis on artefacts that have been derived from the industrial era. What might have worked for some tycoon a hundred years ago doesn&apos;t quite do the trick in modern, dynamic world. \n\nI agree with Hahne in that teams are a suitable smallest unit. Split work per teams and don&apos;t split up teams. Pick new concepts as needed and remove those things that block team success. It is not like you can build a superb team over night. It might form over a longer time, though. Invest in your diamonds. \n\n## Trying to Change Company Culture is a Fool&apos;s Errand - Sami Honkonen\n[I have discussed company culture earlier](http://www.nixtu.info/2014/01/business-is-it-possible-to-separate.html) \n\n### Context is the King\nIf you want to change a culture, you will have to adjust the context. If your cake (culture) tastes bad, you will have to bake it differently using possibly different ingredients. Maybe your cake (culture) will be better that way. \nHow do you know what to tweak then? It turns out system conditions are everywhere. Sami gave a fish tank as an example. Just to give you some idea, at least the following conditions affect the system: lighting, oxygen level, amount of fishes, race of fishes, amount of space in the tank, cleanliness, nourishment, decorations and so on. You can think up a lot more. \n\n### How to Change Company Culture?\nIt is possible to come up with a similar list affecting a company culture. In order to change the culture you will have to change these factors. As an example let&apos;s say your company is one of those cubicle farms. How do you think it will affect the culture? The work is likely done in isolation and the people rely on email a lot. The culture is focused on individual performance. This in turn prevents working with others. If you wanted to change this culture, you would have to change cubicles into something else. \nAnother example is limited WIP (work in progress). If you have the system set up based on teams as Hahne suggested and enforce a WIP limit of one, it gives the teams a very high incentive to focus on finishing. If you take this further and provide incentives based on team performance, you will find that it will be difficult for teams to collaborate with each other. \n\n### Takeaways\nSami&apos;s talk described well what culture is about. It&apos;s something that exists as a result based on system conditions. If you change these conditions, the culture will change as well. There is no direct way to modify it. Rather you tweak it indirectly like this. Even small things might have surprising effects and I expect it&apos;s a whole can of worms if you really start thinking about it. \n\nIn short if culture eats strategy for breakfast, system eats culture for lunch. \n\n## Introduction to Retrospective Facilitation - Ville Ruuskanen\nIsn&apos;t nostalgy great? Who doesn&apos;t love 80s clothing and music? Thankfully retrospectives don&apos;t have to go that far and you don&apos;t have to wear those tight 80s clothes to facilitate them. \n\n### Why to go Retro?\nThe primary advantage of running retrospectives for your team is that they provide a great chance to perform introspection and think about what works and what doesn&apos;t. This ties back to Woody&apos;s and Lauri&apos;s talks in which they highlighted the importance of process improvement. You shouldn&apos;t run a retro only at the end of the project. Rather the greatest benefits are gained if you measure the pulse of your team continuously. In Ville&apos;s case he seemed to prefer a longer one (2-3 hours) once every two weeks though your mileage may vary. \nThere is no single right method to run a retrospective. Instead you should thrive to vary their content. Ville provided a rough frame in which you can build the event itself. I won&apos;t go through the details as you can find them in the slides below. \n<iframe allowfullscreen frameborder=\"0\" height=\"355\" marginheight=\"0\" marginwidth=\"0\" scrolling=\"no\" src=\"//www.slideshare.net/slideshow/embed_code/34807177\" style=\"border-width: 1px; border: 1px solid #CCC; margin-bottom: 5px; max-width: 100%;\" width=\"425\"> </iframe> \n** [Introduction to Retrospective Facilitation](https://www.slideshare.net/VilleRuuskanen/introduction-to-retrospective-facilitation-34807177 \"Introduction to Retrospective Facilitation\")** from **[Ville Ruuskanen](https://www.slideshare.net/VilleRuuskanen)** \nGiven there was another workshop running in the same space at the same time, it was a little noisy at times. Apart from that it was just great as I didn&apos;t know much of the topic beforehand. If I ever have to manage or lead a team, I will have yet another nice tool at my arsenal. \n\n## Self-Management, practical tips for your personal journey - Erik Anderson\nIn order to remain competitive in the current business environment, you will have to continuously push yourself forward. This was the topic of Erik Anderson&apos;s talk. Curiously self management is one of those topics they don&apos;t teach you at school. Rather you are expected to pick it up yourself and some people just fail to do that. If you are aware of the issue, you can probably do something about it. \nErik split the topic in three overlapping parts: body, brain and society. We can do something for each up to a limit. Especially the society part tied back to earlier talks. Where and how you work affects your well-being directly whether you acknowledge that or not. \n\n### Body\nIt is important to keep in mind that humans used to roam savannah. Modern life as is is quite recent invention and we certainly haven&apos;t adapted to it perfectly. This in turn causes all sorts of problems for bodies designed for something else. \nIf we keep these constraints in mind, we can understand better why exercise is so important yet undervalued. Being in a good physical condition affects everything. In addition effects of sleep and proper diet should be kept in mind. \n\n### Brain\nInterestingly exercise gives your brain what it needs in order to change (improved learning, memory). It is possible to &quot;hack&quot; brains in various ways. Sadly they don&apos;t provide user&apos;s manual with them. I guess we wouldn&apos;t be so lost otherwise. \nMindfulness, being aware of what you feel, allows you to observe what you feel rather than react. If you train the brain through meditation, it will get stronger just the way body does when you learn it. \nIt pays off to understand how habits work and what happiness means from perspective of brains. Learned helplessness/optimism is another of those concepts people should be aware of. \nIt is easy to end up in a cycle of depression because depression causes more depression. Breaking the cycle is the problem. On the other hand it might be possible to gain optimist traits and get into another kind of cycle. In the end it comes down how you deal with adversities in life and react to those. \n\n### Society\nErik discussed topics of personality styles, personal strengths and team profiling. I know personality tests and such sound like pigeonholing but the fact is that each of us has their preferred way of working. It is important to be aware of that as that is something that contributes to our happiness. \nIf you can adjust the way you work to suit your personality better, you will likely achieve better results and be happier while at it. \nThe way we relate with society has a big effect on us. Erik described [the concept of transactional analysis](https://en.wikipedia.org/wiki/Transactional_analysis) \n\n### Takeaways\nErik&apos;s talk showed that there is a lot to learn about. Self management and improvement are large topics. To quote Erik you will have to keep on tweaking things to see if they get better and be open for changes. That is the way forward. \n\n## Conclusion\n[Compared to the last year](http://www.nixtu.info/2013/12/afterthoughts-tampere-goes-agile-13.html)","html":"What would a year be without <a href=\"http://tamperegoesagile.fi/\">Tampere Goes Agile</a>? To paraphrase this years motto \"we're all in this together\". This was visible in talks throughout the day.<br /><br /><a href=\"http://www.nixtu.info/2013/12/afterthoughts-tampere-goes-agile-13.html\">Compared to the last year</a> the event was a bit smaller (~135 vs. ~ 235 people). Despite this the event had some very high quality content some of which I'll highlight next. Perhaps the most interesting thing about this year was the inclusion of multiple workshops in middle of the day.<br /><br />Considering Tampere Goes Agile is a free event for participants the quality of it keeps surprising me year after year. Besides excellent selection of talks you get to meet a bunch of great people.<br /><br /><h2>Woody Zuill - Mob Programming</h2><div>The day started with a keynote by Woody Zuill. Initially I was a little skeptical. How could you possibly develop software in a mob? Apparently quite well!</div><div><br /><h3>Traditional Split</h3></div><div>Traditionally software development has relied on division of labor and expert work. The problem is that once you start to split work you will end up with all sorts of dependencies. This in turn can lead to development blocks and wasted time as you are forced to wait or just do something else while at it.&nbsp;</div><div><br /></div><div>Multitasking just makes the situation worse. You will end up jumping between tasks while waiting for answers. This in turn creates stress that definitely doesn't help.</div><div><br /><h3>Get Together?</h3></div><div>What if all the people that have the answers would be in the same room at the same time and developed the software together? You could invite domain specialists or the client even to participate in your sessions. Even though this might sound a little strange approach it alleviates those concerns I just highlighted.</div><div><br /></div><div>When you are working as a mob this allows you to focus all the energy on a single task at a time (automatic single piece flow!). If you end up blocked there is someone with the answer in the vicinity. It is like the concept of pair programming scaled to the team level.</div><div><br /><h3>Woody's Approach</h3></div><div>In Woody's configuration there is a single driver (rotated every 15 mins or so). That person writes the code. The rest operate as navigators and guide the driver. The primary advantage of this seems to be that while the driver can think in code the rest can focus on thinking in human terms. They might also spot inefficiencies and help guide the driver towards better technical solutions that might not have been found otherwise.</div><div><br /></div><div>Given there is so much expertise in the room at the same time this might allow the team to avoid entire categories of problems or eliminate some of the existing ones! Multiple perspectives seem to allow this and the approach helps to avoid some of the traditional sources of waste in software.</div><div><br /></div><div>The approach isn't without its challenges. It could prove challenging for certain people as it literally brings your work out in the open. Working directly with other people isn't the way software is normally developed. For work like this to succeed you will need to remember to be kind, considerate and respect others even if they might be wrong or irk you in some way.</div><div><br /></div><div>Besides removing waste the approach allows information to be shared more effectively (reduced bus factor). As it encourages information sharing through collaboration people pick up new skills faster. This is something you simply don't get in a segregated environment prevalent in the industry.</div><div><br /><h3>Takeaways</h3></div><div>Mob programming is something Woody and his peers discovered through introspection. It was not just something that came out of thin air. Rather they ended up developing software this way because it felt like the right and most effective thing to do. To quote Woody you should find your own way. That said, maybe mobbing works out for you but don't expect it to be a silver bullet.</div><div><br /></div><div>Per Jansson has written <a href=\"http://mobprogramming.org/get-a-good-start-with-mob-programming/\">an introduction to mob programming</a> that might give a better idea of what it's about.</div><div><br /></div><h2>Making Work Flow - Lauri Hahne</h2><div>The gist of Lauri's talk was in how do traditional approaches fail us. He sees software development as a systems and a learning problem. This is very opposite to the waterfall view. I agree with Lauri here. The system, context in which we develop software, puts heavy constraints on productivity. Unless you are developing something you have done before exactly, learning will need to happen. Both of these contribute heavily to project success even if you aren't aware of the issue.</div><div><br /><h3>The Traditional Model</h3></div><div>The traditional development model is very static in sense that it builds on things like requirements management, HR and distribution of work for maximum utilization. The traditional model focuses heavily on aspects such as technology choices, finding proficient people and division of labor. Teams are formed per project, work is performed on individual level and all of that is managed by a project manager.</div><div><br /></div><div>If you are building something you have developed before I have no doubt the traditional model couldn't work. What happens, though, when you need to work on something more complex? How do you know you are building the right thing in the first place? How do you measure the impact of your results?</div><div><br /></div><div>The traditional development model has a lot to owe to Taylor and the industrial era. The theories expect that people are lazy by default and need to be managed for work to get done. Specialization is required to get most out of division of labor. What if some, or all, of the assumptions we've built our development processes are wrong?</div><div><br /><h3>What Are Good Teams Like?</h3></div><div>What if people aren't lazy and actually want to get things done? What if good teams are larger than the sum of their parts? What if it is beneficial for people to have cross-competencies, not just specialities?</div><div><br /></div><div>According to Hahne <a href=\"http://scrumlab.scruminc.com/articles.html/_/open/finish-early-accelerate-faster-r56\">teams that finish early, accelerate faster</a>. He highlighted the importance of stable teams, swarming (single piece flow again!) and scrumming the scrum. You have to be prepared to work on the way you work for things to improve.</div><div><br /></div><div>You will likely have to discard some of the older ideas to get better. There are plenty of sources for new ones. Of these Hahne mentioned Toyota Production System (Kanban etc. come from here) and John Boyd's Blitzkrieg. He also suggested rethinking division of work. What if you operated per technological layer, screen or feature as a team. It's not a huge leap to mob programming from here.</div><div><br /></div><div>Hahne values stable teams of teams formed per project. Stable teams operate more consistently, eliminate HR and allows them to operate more effectively as you minimize the effect of Tuckman cycle related to forming of teams.</div><div><br /></div><div>Hahne highlighted swarming as it will allow each team to operate on a single task at a time (single piece flow). Rather than working on tons of smaller issues at once you actually focus on getting something ready. This eliminates a significant amount of waste and multitasking which in turn improves productivity.</div><div><br /><h3>Focus on Process Improvement</h3></div><div>Hahne's focus on working on the process itself was prevalent. You should have a good idea of what is blocking team's performance and take steps towards eliminating it. Again, focus on teams seems to be the key here.</div><div><br /></div><div>If software development has taught me anything, it's that errors pile up and accomplishments disappear. When things go south, people start feeling bad and the cycle gets even worse. If you rush things to make a deadline, you will pay for it later in forms of technical debt and reduced morale. What if you could do things better in the first place and avoid this?<br /><br /><h3>Takeaways</h3></div><div>Traditional software development puts too much emphasis on artefacts that have been derived from the industrial era. What might have worked for some tycoon a hundred years ago doesn't quite do the trick in modern, dynamic world.<br /><br />I agree with Hahne in that teams are a suitable smallest unit. Split work per teams and don't split up teams. Pick new concepts as needed and remove those things that block team success. It is not like you can build a superb team over night. It might form over a longer time, though. Invest in your diamonds.<br /><br /></div><h2>Trying to Change Company Culture is a Fool's Errand - Sami Honkonen</h2><div><a href=\"http://www.nixtu.info/2014/01/business-is-it-possible-to-separate.html\">I have discussed company culture earlier</a>. Sami's talk gave good food for thought. How are cultures formed? How can you change cultures? According to Sami in order to change a culture, you will have to adjust system conditions that cause it. In short culture should be seen as a result of all the things that are going on, not something you can tweak directly.</div><div><br /><h3>Context is the King</h3></div><div>If you want to change a culture, you will have to adjust the context. If your cake (culture) tastes bad, you will have to bake it differently using possibly different ingredients. Maybe your cake (culture) will be better that way.</div><div><br /></div><div>How do you know what to tweak then? It turns out system conditions are everywhere. Sami gave a fish tank as an example. Just to give you some idea, at least the following conditions affect the system: lighting, oxygen level, amount of fishes, race of fishes, amount of space in the tank, cleanliness, nourishment, decorations and so on. You can think up a lot more.</div><div><br /><h3>How to Change Company Culture?</h3></div><div>It is possible to come up with a similar list affecting a company culture. In order to change the culture you will have to change these factors. As an example let's say your company is one of those cubicle farms. How do you think it will affect the culture? The work is likely done in isolation and the people rely on email a lot. The culture is focused on individual performance. This in turn prevents working with others. If you wanted to change this culture, you would have to change cubicles into something else.</div><div><br /></div><div>Another example is limited WIP (work in progress). If you have the system set up based on teams as Hahne suggested and enforce a WIP limit of one, it gives the teams a very high incentive to focus on finishing. If you take this further and provide incentives based on team performance, you will find that it will be difficult for teams to collaborate with each other.</div><div><br /><h3>Takeaways</h3></div><div>Sami's talk described well what culture is about. It's something that exists as a result based on system conditions. If you change these conditions, the culture will change as well. There is no direct way to modify it. Rather you tweak it indirectly like this. Even small things might have surprising effects and I expect it's a whole can of worms if you really start thinking about it.<br /><br />In short if culture eats strategy for breakfast, system eats culture for lunch.</div><div><br /></div><h2>Introduction to Retrospective Facilitation - Ville Ruuskanen</h2><div>Isn't nostalgy great? Who doesn't love 80s clothing and music? Thankfully retrospectives don't have to go that far and you don't have to wear those tight 80s clothes to facilitate them.</div><div><br /><h3>Why to go Retro?</h3></div><div>The primary advantage of running retrospectives for your team is that they provide a great chance to perform introspection and think about what works and what doesn't. This ties back to Woody's and Lauri's talks in which they highlighted the importance of process improvement. You shouldn't run a retro only at the end of the project. Rather the greatest benefits are gained if you measure the pulse of your team continuously. In Ville's case he seemed to prefer a longer one (2-3 hours) once every two weeks though your mileage may vary.</div><div><br /></div><div>There is no single right method to run a retrospective. Instead you should thrive to vary their content. Ville provided a rough frame in which you can build the event itself. I won't go through the details as you can find them in the slides below.</div><div><br /></div><div><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"355\" marginheight=\"0\" marginwidth=\"0\" scrolling=\"no\" src=\"//www.slideshare.net/slideshow/embed_code/34807177\" style=\"border-width: 1px; border: 1px solid #CCC; margin-bottom: 5px; max-width: 100%;\" width=\"425\"> </iframe> <br /><div style=\"margin-bottom: 5px;\"><strong> <a href=\"https://www.slideshare.net/VilleRuuskanen/introduction-to-retrospective-facilitation-34807177\" target=\"_blank\" title=\"Introduction to Retrospective Facilitation\">Introduction to Retrospective Facilitation</a> </strong> from <strong><a href=\"https://www.slideshare.net/VilleRuuskanen\" target=\"_blank\">Ville Ruuskanen</a></strong> </div><div><br />Given there was another workshop running in the same space at the same time, it was a little noisy at times. Apart from that it was just great as I didn't know much of the topic beforehand. If I ever have to manage or lead a team, I will have yet another nice tool at my arsenal.</div><div><br /><h2>Self-Management, practical tips for your personal journey - Erik Anderson</h2></div></div><div>In order to remain competitive in the current business environment, you will have to continuously push yourself forward. This was the topic of Erik Anderson's talk. Curiously self management is one of those topics they don't teach you at school. Rather you are expected to pick it up yourself and some people just fail to do that. If you are aware of the issue, you can probably do something about it.</div><div><br /></div><div>Erik split the topic in three overlapping parts: body, brain and society. We can do something for each up to a limit. Especially the society part tied back to earlier talks. Where and how you work affects your well-being directly whether you acknowledge that or not.</div><div><br /></div><div><h3>Body</h3><div>It is important to keep in mind that humans used to roam savannah. Modern life as is is quite recent invention and we certainly haven't adapted to it perfectly. This in turn causes all sorts of problems for bodies designed for something else.</div><div><br /></div><div>If we keep these constraints in mind, we can understand better why exercise is so important yet undervalued. Being in a good physical condition affects everything. In addition effects of sleep and proper diet should be kept in mind.</div><div><br /></div></div><h3>Brain</h3><div>Interestingly exercise gives your brain what it needs in order to change (improved learning, memory). It is possible to \"hack\" brains in various ways. Sadly they don't provide user's manual with them. I guess we wouldn't be so lost otherwise.</div><div><br /></div><div>Mindfulness, being aware of what you feel, allows you to observe what you feel rather than react. If you train the brain through meditation, it will get stronger just the way body does when you learn it.</div><div><br /></div><div>It pays off to understand how habits work and what happiness means from perspective of brains. Learned helplessness/optimism is another of those concepts people should be aware of.</div><div><br /></div><div>It is easy to end up in a cycle of depression because depression causes more depression. Breaking the cycle is the problem. On the other hand it might be possible to gain optimist traits and get into another kind of cycle. In the end it comes down how you deal with adversities in life and react to those.</div><div><br /></div><h3>Society</h3><div>Erik discussed topics of personality styles, personal strengths and team profiling. I know personality tests and such sound like pigeonholing but the fact is that each of us has their preferred way of working. It is important to be aware of that as that is something that contributes to our happiness.</div><div><br /></div><div>If you can adjust the way you work to suit your personality better, you will likely achieve better results and be happier while at it.</div><div><br /></div><div>The way we relate with society has a big effect on us. Erik described <a href=\"https://en.wikipedia.org/wiki/Transactional_analysis\">the concept of transactional analysis</a>. The key thing to understand here is that a person is a multi-faceted concept in how it relates with the world. These facets (parent, adult, child) get triggered in social situations and helps to explain why responses are the way they are. If someone snaps at you, maybe there was something about the way you poked the person that triggered the child response to parent question?</div><div><br /></div><h3>Takeaways</h3><div>Erik's talk showed that there is a lot to learn about. Self management and improvement are large topics. To quote Erik you will have to keep on tweaking things to see if they get better and be open for changes. That is the way forward.</div><div><br /></div><h2>Conclusion</h2><div>It's probably not an understatement to say that this Tampere Goes Agile was the best one so far. I loved the talks and even the party after the event was fine although I felt embarrathed over wordings of certain agile songs performed. I hope the event will be arranged again next year and definitely plan to go it if is!</div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1414314360000,"created_by":1,"updated_at":1414314416648,"updated_by":1,"published_at":1414314360000,"published_by":1}],"tags":[{"id":0,"name":"Javascript","slug":"javascript","description":""},{"id":1,"name":"Programming","slug":"programming","description":""},{"id":2,"name":"Web Development","slug":"web_development","description":""},{"id":3,"name":"Python","slug":"python","description":""},{"id":4,"name":"Software Development","slug":"software_development","description":""},{"id":5,"name":"Business","slug":"business","description":""},{"id":6,"name":"Tutorial","slug":"tutorial","description":""},{"id":7,"name":"Startups","slug":"startups","description":""},{"id":8,"name":"Linkdump","slug":"linkdump","description":""},{"id":9,"name":"Packt","slug":"packt","description":""},{"id":10,"name":"Node","slug":"node","description":""},{"id":11,"name":"Css","slug":"css","description":""},{"id":12,"name":"Art","slug":"art","description":""},{"id":13,"name":"Canvas","slug":"canvas","description":""},{"id":14,"name":"Placidity","slug":"placidity","description":""},{"id":15,"name":"Testing","slug":"testing","description":""},{"id":16,"name":"Agile","slug":"agile","description":""},{"id":17,"name":"Book Review","slug":"book_review","description":""},{"id":18,"name":"Html5","slug":"html_5","description":""},{"id":19,"name":"Tdd","slug":"tdd","description":""},{"id":20,"name":"Computer Graphics","slug":"computer_graphics","description":""},{"id":21,"name":"Interpreter","slug":"interpreter","description":""},{"id":22,"name":"Py.test","slug":"py_test","description":""},{"id":23,"name":"Gradient","slug":"gradient","description":""},{"id":24,"name":"Ux","slug":"ux","description":""},{"id":25,"name":"Finland","slug":"finland","description":""},{"id":26,"name":"Jquery","slug":"jquery","description":""},{"id":27,"name":"Django","slug":"django","description":""},{"id":28,"name":"Jyväskylä","slug":"jyvaskyla","description":""},{"id":29,"name":"Design","slug":"design","description":""},{"id":30,"name":"Functional Programming","slug":"functional_programming","description":""},{"id":31,"name":"Lean","slug":"lean","description":""},{"id":32,"name":"Lean Startup","slug":"lean_startup","description":""},{"id":33,"name":"Hardware","slug":"hardware","description":""},{"id":34,"name":"Mocking","slug":"mocking","description":""},{"id":35,"name":"Software Architecture","slug":"software_architecture","description":""},{"id":36,"name":"Web Design","slug":"web_design","description":""},{"id":37,"name":"Books","slug":"books","description":""},{"id":38,"name":"Conference","slug":"conference","description":""},{"id":39,"name":"Games","slug":"games","description":""},{"id":40,"name":"Ipad","slug":"ipad","description":""},{"id":41,"name":"Kanban","slug":"kanban","description":""},{"id":42,"name":"Open Source","slug":"open_source","description":""},{"id":43,"name":"Rightjs","slug":"rightjs","description":""},{"id":44,"name":"Speccer","slug":"speccer","description":""},{"id":45,"name":"Travel","slug":"travel","description":""},{"id":46,"name":"Apple","slug":"apple","description":""},{"id":47,"name":"Elovalo","slug":"elovalo","description":""},{"id":48,"name":"Events","slug":"events","description":""},{"id":49,"name":"Git","slug":"git","description":""},{"id":50,"name":"Haskell","slug":"haskell","description":""},{"id":51,"name":"Osx","slug":"osx","description":""},{"id":52,"name":"Rest","slug":"rest","description":""},{"id":53,"name":"Assert","slug":"assert","description":""},{"id":54,"name":"Color","slug":"color","description":""},{"id":55,"name":"Italy","slug":"italy","description":""},{"id":56,"name":"Jswiki","slug":"jswiki","description":""},{"id":57,"name":"Open Data","slug":"open_data","description":""},{"id":58,"name":"Personal Development","slug":"personal_development","description":""},{"id":59,"name":"React","slug":"react","description":""},{"id":60,"name":"3d","slug":"3_d","description":""},{"id":61,"name":"Blogger","slug":"blogger","description":""},{"id":62,"name":"Culture","slug":"culture","description":""},{"id":63,"name":"Design Patterns","slug":"design_patterns","description":""},{"id":64,"name":"Harmony","slug":"harmony","description":""},{"id":65,"name":"Instanssi","slug":"instanssi","description":""},{"id":66,"name":"Iterplus","slug":"iterplus","description":""},{"id":67,"name":"Latex","slug":"latex","description":""},{"id":68,"name":"Links","slug":"links","description":""},{"id":69,"name":"Linux","slug":"linux","description":""},{"id":70,"name":"Mankees","slug":"mankees","description":""},{"id":71,"name":"Marketing","slug":"marketing","description":""},{"id":72,"name":"Math","slug":"math","description":""},{"id":73,"name":"Music","slug":"music","description":""},{"id":74,"name":"Painting","slug":"painting","description":""},{"id":75,"name":"Php","slug":"php","description":""},{"id":76,"name":"Program Design","slug":"program_design","description":""},{"id":77,"name":"Pypandoc","slug":"pypandoc","description":""},{"id":78,"name":"Pyqa","slug":"pyqa","description":""},{"id":79,"name":"Requirejs","slug":"requirejs","description":""},{"id":80,"name":"Scraping","slug":"scraping","description":""},{"id":81,"name":"Social Media","slug":"social_media","description":""},{"id":82,"name":"System Testing","slug":"system_testing","description":""},{"id":83,"name":"Tampere","slug":"tampere","description":""},{"id":84,"name":"Agilejkl","slug":"agilejkl","description":""},{"id":85,"name":"Angular","slug":"angular","description":""},{"id":86,"name":"Api","slug":"api","description":""},{"id":87,"name":"Applications","slug":"applications","description":""},{"id":88,"name":"Cdnperf","slug":"cdnperf","description":""},{"id":89,"name":"Chaining","slug":"chaining","description":""},{"id":90,"name":"Consulting","slug":"consulting","description":""},{"id":91,"name":"Drawing","slug":"drawing","description":""},{"id":92,"name":"Future","slug":"future","description":""},{"id":93,"name":"Ghost","slug":"ghost","description":""},{"id":94,"name":"Graphs","slug":"graphs","description":""},{"id":95,"name":"Grok","slug":"grok","description":""},{"id":96,"name":"Grunt","slug":"grunt","description":""},{"id":97,"name":"Interval","slug":"interval","description":""},{"id":98,"name":"Ios","slug":"ios","description":""},{"id":99,"name":"Jsopo","slug":"jsopo","description":""},{"id":100,"name":"Jsshaper","slug":"jsshaper","description":""},{"id":101,"name":"Lifestyle","slug":"lifestyle","description":""},{"id":102,"name":"Lua","slug":"lua","description":""},{"id":103,"name":"Markdown","slug":"markdown","description":""},{"id":104,"name":"Mepis","slug":"mepis","description":""},{"id":105,"name":"Pynu","slug":"pynu","description":""},{"id":106,"name":"Refactoring","slug":"refactoring","description":""},{"id":107,"name":"Sketching","slug":"sketching","description":""},{"id":108,"name":"Swdev","slug":"swdev","description":""},{"id":109,"name":"Terminal","slug":"terminal","description":""},{"id":110,"name":"Threading","slug":"threading","description":""},{"id":111,"name":"Tinytest","slug":"tinytest","description":""},{"id":112,"name":"Twitter","slug":"twitter","description":""},{"id":113,"name":"Typography","slug":"typography","description":""},{"id":114,"name":"Uml","slug":"uml","description":""},{"id":115,"name":"Vpython","slug":"vpython","description":""},{"id":116,"name":"Zenwalk","slug":"zenwalk","description":""},{"id":117,"name":"Agents","slug":"agents","description":""},{"id":118,"name":"Ai","slug":"ai","description":""},{"id":119,"name":"Algorithms","slug":"algorithms","description":""},{"id":120,"name":"Android","slug":"android","description":""},{"id":121,"name":"Ast","slug":"ast","description":""},{"id":122,"name":"Autodoc","slug":"autodoc","description":""},{"id":123,"name":"Bduf","slug":"bduf","description":""},{"id":124,"name":"Bibtex","slug":"bibtex","description":""},{"id":125,"name":"Biking","slug":"biking","description":""},{"id":126,"name":"Browserify","slug":"browserify","description":""},{"id":127,"name":"Bunit","slug":"bunit","description":""},{"id":128,"name":"Canvasdraw","slug":"canvasdraw","description":""},{"id":129,"name":"Code Coverage","slug":"code_coverage","description":""},{"id":130,"name":"Colorama","slug":"colorama","description":""},{"id":131,"name":"Colorjs","slug":"colorjs","description":""},{"id":132,"name":"Computer Science","slug":"computer_science","description":""},{"id":133,"name":"Cython","slug":"cython","description":""},{"id":134,"name":"Data Mining","slug":"data_mining","description":""},{"id":135,"name":"Debugging","slug":"debugging","description":""},{"id":136,"name":"Dialog","slug":"dialog","description":""},{"id":137,"name":"Disqus","slug":"disqus","description":""},{"id":138,"name":"Documentation","slug":"documentation","description":""},{"id":139,"name":"Dropbox","slug":"dropbox","description":""},{"id":140,"name":"Dvcs","slug":"dvcs","description":""},{"id":141,"name":"Dwoo","slug":"dwoo","description":""},{"id":142,"name":"E-commerce","slug":"e_commerce","description":""},{"id":143,"name":"Education","slug":"education","description":""},{"id":144,"name":"Eliza","slug":"eliza","description":""},{"id":145,"name":"Figure Drawing","slug":"figure_drawing","description":""},{"id":146,"name":"File System","slug":"file_system","description":""},{"id":147,"name":"Filter","slug":"filter","description":""},{"id":148,"name":"Firefox","slug":"firefox","description":""},{"id":149,"name":"Fossil","slug":"fossil","description":""},{"id":150,"name":"Fractals","slug":"fractals","description":""},{"id":151,"name":"Free Software","slug":"free_software","description":""},{"id":152,"name":"Fstab","slug":"fstab","description":""},{"id":153,"name":"Ghw","slug":"ghw","description":""},{"id":154,"name":"Gis","slug":"gis","description":""},{"id":155,"name":"Github","slug":"github","description":""},{"id":156,"name":"Google","slug":"google","description":""},{"id":157,"name":"Gulp","slug":"gulp","description":""},{"id":158,"name":"Haml","slug":"haml","description":""},{"id":159,"name":"Immaterial Rights","slug":"immaterial_rights","description":""},{"id":160,"name":"Import","slug":"import","description":""},{"id":161,"name":"Intensedebate","slug":"intensedebate","description":""},{"id":162,"name":"Itunes","slug":"itunes","description":""},{"id":163,"name":"Jekyll","slug":"jekyll","description":""},{"id":164,"name":"Jolla","slug":"jolla","description":""},{"id":165,"name":"Jsdoit","slug":"jsdoit","description":""},{"id":166,"name":"Keyhandling","slug":"keyhandling","description":""},{"id":167,"name":"Koodilehto","slug":"koodilehto","description":""},{"id":168,"name":"L-systems","slug":"l_systems","description":""},{"id":169,"name":"Layar","slug":"layar","description":""},{"id":170,"name":"Leadership","slug":"leadership","description":""},{"id":171,"name":"Logging","slug":"logging","description":""},{"id":172,"name":"Manifesto","slug":"manifesto","description":""},{"id":173,"name":"Map","slug":"map","description":""},{"id":174,"name":"Moo","slug":"moo","description":""},{"id":175,"name":"Mooc","slug":"mooc","description":""},{"id":176,"name":"Mosaic","slug":"mosaic","description":""},{"id":177,"name":"Mount","slug":"mount","description":""},{"id":178,"name":"Multimedia","slug":"multimedia","description":""},{"id":179,"name":"Mysql","slug":"mysql","description":""},{"id":180,"name":"Networking","slug":"networking","description":""},{"id":181,"name":"Nltk","slug":"nltk","description":""},{"id":182,"name":"Noprojects","slug":"noprojects","description":""},{"id":183,"name":"Opensuse","slug":"opensuse","description":""},{"id":184,"name":"Pandoc","slug":"pandoc","description":""},{"id":185,"name":"Performance","slug":"performance","description":""},{"id":186,"name":"Perl","slug":"perl","description":""},{"id":187,"name":"Photo","slug":"photo","description":""},{"id":188,"name":"Pingdom","slug":"pingdom","description":""},{"id":189,"name":"Pragprog","slug":"pragprog","description":""},{"id":190,"name":"Presentation","slug":"presentation","description":""},{"id":191,"name":"Pyrex","slug":"pyrex","description":""},{"id":192,"name":"R","slug":"r","description":""},{"id":193,"name":"Rainbow","slug":"rainbow","description":""},{"id":194,"name":"Reduce","slug":"reduce","description":""},{"id":195,"name":"Regex","slug":"regex","description":""},{"id":196,"name":"Review","slug":"review","description":""},{"id":197,"name":"Ruby","slug":"ruby","description":""},{"id":198,"name":"Sass","slug":"sass","description":""},{"id":199,"name":"Satchmo","slug":"satchmo","description":""},{"id":200,"name":"Savonia","slug":"savonia","description":""},{"id":201,"name":"Sicily","slug":"sicily","description":""},{"id":202,"name":"Sidebar","slug":"sidebar","description":""},{"id":203,"name":"Skribit","slug":"skribit","description":""},{"id":204,"name":"Software Maintenance","slug":"software_maintenance","description":""},{"id":205,"name":"Spartaa","slug":"spartaa","description":""},{"id":206,"name":"Spatial Indexing","slug":"spatial_indexing","description":""},{"id":207,"name":"Sphinx","slug":"sphinx","description":""},{"id":208,"name":"Spotify","slug":"spotify","description":""},{"id":209,"name":"Swagger","slug":"swagger","description":""},{"id":210,"name":"Test Runner","slug":"test_runner","description":""},{"id":211,"name":"Tokenizing","slug":"tokenizing","description":""},{"id":212,"name":"Ubuntu","slug":"ubuntu","description":""},{"id":213,"name":"Umd","slug":"umd","description":""},{"id":214,"name":"Umount","slug":"umount","description":""},{"id":215,"name":"Underscore.js","slug":"underscore_js","description":""},{"id":216,"name":"Vagrant","slug":"vagrant","description":""},{"id":217,"name":"Vim","slug":"vim","description":""},{"id":218,"name":"Virtualization","slug":"virtualization","description":""},{"id":219,"name":"Web Comics","slug":"web_comics","description":""},{"id":220,"name":"Webgl","slug":"webgl","description":""},{"id":221,"name":"Webpack","slug":"webpack","description":""},{"id":222,"name":"Wercker","slug":"wercker","description":""},{"id":223,"name":"Work","slug":"work","description":""}],"posts_tags":[{"tag_id":16,"post_id":0},{"tag_id":85,"post_id":0},{"tag_id":12,"post_id":0},{"tag_id":5,"post_id":0},{"tag_id":20,"post_id":0},{"tag_id":11,"post_id":0},{"tag_id":29,"post_id":0},{"tag_id":49,"post_id":0},{"tag_id":33,"post_id":0},{"tag_id":0,"post_id":0},{"tag_id":8,"post_id":0},{"tag_id":58,"post_id":0},{"tag_id":59,"post_id":0},{"tag_id":4,"post_id":0},{"tag_id":15,"post_id":0},{"tag_id":0,"post_id":1},{"tag_id":70,"post_id":1},{"tag_id":10,"post_id":1},{"tag_id":1,"post_id":1},{"tag_id":2,"post_id":1},{"tag_id":29,"post_id":2},{"tag_id":36,"post_id":2},{"tag_id":96,"post_id":3},{"tag_id":0,"post_id":3},{"tag_id":1,"post_id":3},{"tag_id":77,"post_id":3},{"tag_id":3,"post_id":3},{"tag_id":59,"post_id":3},{"tag_id":213,"post_id":3},{"tag_id":2,"post_id":3},{"tag_id":85,"post_id":4},{"tag_id":126,"post_id":4},{"tag_id":96,"post_id":4},{"tag_id":157,"post_id":4},{"tag_id":0,"post_id":4},{"tag_id":59,"post_id":4},{"tag_id":52,"post_id":4},{"tag_id":209,"post_id":4},{"tag_id":2,"post_id":4},{"tag_id":221,"post_id":4},{"tag_id":13,"post_id":5},{"tag_id":23,"post_id":5},{"tag_id":18,"post_id":5},{"tag_id":0,"post_id":5},{"tag_id":1,"post_id":5},{"tag_id":6,"post_id":5},{"tag_id":13,"post_id":6},{"tag_id":23,"post_id":6},{"tag_id":18,"post_id":6},{"tag_id":0,"post_id":6},{"tag_id":1,"post_id":6},{"tag_id":6,"post_id":6},{"tag_id":13,"post_id":7},{"tag_id":23,"post_id":7},{"tag_id":18,"post_id":7},{"tag_id":0,"post_id":7},{"tag_id":1,"post_id":7},{"tag_id":6,"post_id":7},{"tag_id":16,"post_id":8},{"tag_id":12,"post_id":8},{"tag_id":5,"post_id":8},{"tag_id":20,"post_id":8},{"tag_id":11,"post_id":8},{"tag_id":29,"post_id":8},{"tag_id":0,"post_id":8},{"tag_id":8,"post_id":8},{"tag_id":58,"post_id":8},{"tag_id":4,"post_id":8},{"tag_id":7,"post_id":8},{"tag_id":2,"post_id":8},{"tag_id":16,"post_id":9},{"tag_id":38,"post_id":9},{"tag_id":31,"post_id":9},{"tag_id":1,"post_id":9},{"tag_id":4,"post_id":9},{"tag_id":83,"post_id":9}]}}
